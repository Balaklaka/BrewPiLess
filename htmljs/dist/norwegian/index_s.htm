<!DOCTYPE html><html lang="nei"><head><meta http-equiv=content-type content="text/html; charset=utf-8"><meta name=viewport content="width=device-width,initial-scale=1"><title> BrewPiLess til tjeneste! </title><meta name=apple-mobile-web-app-title content=BrewPiLess><meta name=apple-mobile-web-app-capable content=yes><script type=text/javascript src=/dygraph.min.js ignore></script><script>!function(){"use strict";var n;window.Dygraph?n=window.Dygraph:"undefined"!=typeof module&&(n=require("../dygraph"));function a(n,a){if(!Array.isArray(n)||!Array.isArray(a))return!1;var t=n.length;if(t!==a.length)return!1;for(;t--;)if(n[t]!==a[t])return!1;return!0}function t(n,t,e){for(var i=!1,r=0;r<n.length;r++){n[r].updateOptions({drawCallback:function(r,l){if(!i&&!l){i=!0;var o={dateWindow:r.xAxisRange()};t.range&&(o.valueRange=r.yAxisRange());for(var h=0;h<n.length;h++)n[h]!=r?a(o.dateWindow,n[h].getOption("dateWindow"))&&a(o.valueRange,n[h].getOption("valueRange"))||n[h].updateOptions(o):e[h]&&e[h].drawCallback&&e[h].drawCallback.apply(this,arguments);i=!1}}},!0)}}function e(n,a){for(var t=!1,e=0;e<n.length;e++){n[e].updateOptions({highlightCallback:function(e,i,r,l,o){if(!t){t=!0;for(var h=0;h<n.length;h++)if(this!=n[h]){var g=n[h].getRowForX(i);null!==g&&n[h].setSelection(g,o)}else a[h]&&a[h].highlightCallback&&a[h].highlightCallback.apply(this,arguments);t=!1}},unhighlightCallback:function(e){if(!t){t=!0;for(var i=0;i<n.length;i++)this!=n[i]?n[i].clearSelection():a[i]&&a[i].unhighlightCallback&&a[i].unhighlightCallback.apply(this,arguments);t=!1}}},!0)}}n.synchronize=function(){if(0===arguments.length)throw"Invalid invocation of Dygraph.synchronize(). Need >= 1 argument.";var a=["selection","zoom","range"],i={selection:!0,zoom:!0,range:!0},r=[],l=[],o=function(n){if(!(n instanceof Object))throw"Last argument must be either Dygraph or Object.";for(var t=0;t<a.length;t++){var e=a[t];n.hasOwnProperty(e)&&(i[e]=n[e])}};if(arguments[0]instanceof n){for(var h=0;h<arguments.length&&arguments[h]instanceof n;h++)r.push(arguments[h]);if(h<arguments.length-1)throw"Invalid invocation of Dygraph.synchronize(). All but the last argument must be Dygraph objects.";h==arguments.length-1&&o(arguments[arguments.length-1])}else{if(!arguments[0].length)throw"Invalid invocation of Dygraph.synchronize(). First parameter must be either Dygraph or list of Dygraphs.";for(h=0;h<arguments[0].length;h++)r.push(arguments[0][h]);if(2==arguments.length)o(arguments[1]);else if(arguments.length>2)throw"Invalid invocation of Dygraph.synchronize(). Expected two arguments: array and optional options argument."}if(r.length<2)throw"Invalid invocation of Dygraph.synchronize(). Need two or more dygraphs to synchronize.";var g=r.length;for(h=0;h<r.length;h++)r[h].ready(function(){if(0==--g){for(var n=["drawCallback","highlightCallback","unhighlightCallback"],a=0;a<r.length;a++){l[a]||(l[a]={});for(var o=n.length-1;o>=0;o--)l[a][n[o]]=r[a].getFunctionOption(n[o])}i.zoom&&t(r,i,l),i.selection&&e(r,l)}});return{detach:function(){for(var n=0;n<r.length;n++){var a=r[n];i.zoom&&a.updateOptions({drawCallback:l[n].drawCallback}),i.selection&&a.updateOptions({highlightCallback:l[n].highlightCallback,unhighlightCallback:l[n].unhighlightCallback})}r=null,i=null,l=null}}}}()</script><script>function invoke(n){var e=new XMLHttpRequest;e.onreadystatechange=function(){4==e.readyState&&(200==e.status?n.success(e.responseText):e.onerror(e.status))},e.ontimeout=function(){void 0!==n.timeout?n.timeout():e.onerror(-1)},e.onerror=function(e){void 0!==n.fail&&n.fail(e)},e.open(n.m,n.url,!0),void 0!==n.data?(e.setRequestHeader("Content-Type",void 0!==n.mime?n.mime:"application/x-www-form-urlencoded"),e.send(n.data)):e.send()}var BWF={process:function(msg){if(null==this.raw)for(var key in eval("m={"+msg+"}"),m)void 0!==this.handlers[key]&&this.handlers[key](m[key]);else this.raw(msg)},on:function(n,e){this.handlers[n]=e},send:function(n){1==this.ws.readyState&&this.ws.send(n)},reconnecting:!1,status:function(){return void 0===this.ws?-1:1==this.ws.readyState?0:1},connect:function(){var n=this;if("undefined"!=typeof WebSocket){var e=new WebSocket("ws://"+document.location.host+"/ws");n.ws=e,e.onopen=function(){console.log("Connected"),n.onconnect()},e.onclose=function(){n.reconnecting||(console.log("WS close"),n.error(-2),n.auto&&setTimeout(function(){n.reconnect()},5e3))},e.onmessage=function(e){n.process(e.data)}}else alert("Error! WebSocket Not Supported!")},reconnect:function(n){n=void 0!==n;var e=this;e.reconnecting||(n||1!=e.ws.readyState)&&(console.log("reconnect forced:"+n+" state:"+e.ws.readyState),e.reconnecting=!0,e.ws.close(),e.connect(),e.reconnecting=!1)},init:function(n){var e=this;e.error=void 0===n.error?function(){}:n.error,e.handlers=void 0===n.handlers?{}:n.handlers,e.raw=void 0===n.raw?null:n.raw,e.onconnect=void 0===n.onconnect?function(){}:n.onconnect,e.auto=void 0===n.reconnect||n.reconnect,e.connect()},save:function(n,e,o,t){invoke({m:"POST",url:"/fputs",data:"path="+n+"&content="+encodeURIComponent(e),success:function(){o()},fail:function(n){t(n)}})},load:function(n,e,o){invoke({m:"GET",url:n,success:function(n){e(n)},fail:function(n){o(n)}})}}</script><script>/* chart.js */
var  CHART_VERSION = 6;

var GravityChangePeriod1 = 6 * 3600;
var GravityChangePeriod2 = 12 * 3600;
var GravityChangePeriod3 =24 * 3600;
    function SimpleFilter(beta) {
        this.b = beta;
        this.y =0;
    }
    SimpleFilter.prototype.reset =function() {
        this.y = 0;
    };
    SimpleFilter.prototype.add= function(gravity) {
        if (this.y == 0) this.y = gravity;
        else this.y = this.y + this.b * (gravity - this.y);
        return this.y;
    };
    SimpleFilter.prototype.setBeta=function(beta) {
        this.b = beta;
    };

    var GravityFilter= new SimpleFilter(0.1);


        // gravity tracking
        var GravityAndTiltIndex = 6;
        var PSIIndex = 7;
        var RoomTemperatureIndex = 4;

        var BrewChart = function(div) {
            var t = this;
            t.cid = div;
            t.ctime = 0;
            t.interval = 60;
            t.numLine = 7;
            t.numData = 8;
            t.calculateSG = false;
            t.calibrating = false;

            t.lidx = 0;
            t.celius = true;
            t.GravityChangeChart=false;
            t.data = [];
            t.clearData();
        };
        var colorIdle = "white";
        var colorCool = "rgba(0, 0, 255, 0.4)";
        var colorHeat = "rgba(255, 0, 0, 0.4)";
        var colorWaitingHeat = "rgba(255, 0, 0, 0.2)";
        var colorWaitingCool = "rgba(0, 0, 255, 0.2)";
        var colorHeatingMinTime = "rgba(255, 0, 0, 0.6)";
        var colorCoolingMinTime = "rgba(0, 0, 255, 0.6)";
        var colorWaitingPeakDetect = "rgba(0, 0, 0, 0.2)";

        // line colors

        var ColorBeerTemp="rgb(41,170,41)";
        var ColorBeerSet ="rgb(240, 100, 100)";
        var ColorFridgeTemp="rgb(89, 184, 255)";
        var ColorFridgeSet ="rgb(255, 161, 76)";
        var ColorRoomTemp = "#AAAAAA";
        var ColorAuxTemp =  "#f5e127";
        var ColorGravity="rgb(153,0,153)";
        var ColorFiltersg ="#000abb";

        var colorPressure="#0000EE";
        var colorPressureSet="rgb(240, 100, 100)";
        var colorCarbonation="gray";

        var colorHumidity="#2222DD";
        var colorHumiditySet="#EE1111";
        var colorRoomHumidity="#AAAAAA";
        var SgChange1Color="#DD33DD";
        var SgChange2Color="#3333DD";
        var SgChange3Color="#33DD33";

        var STATE_LINE_WIDTH = 15;
        var STATES = [{
            name: "IDLE",
            color: colorIdle,
            text: "Venter"
        }, {
            name: "STATE_OFF",
            color: colorIdle,
            text: "Av"
        }, {
            name: "DOOR_OPEN",
            color: "#eee",
            text: "Døren er åpen",
            doorOpen: true
        }, {
            name: "HEATING",
            color: colorHeat,
            text: "Oppvarming"
        }, {
            name: "COOLING",
            color: colorCool,
            text: "Kjøling"
        }, {
            name: "WAITING_TO_COOL",
            color: colorWaitingCool,
            text: "Venter på kjøling",
            waiting: true
        }, {
            name: "WAITING_TO_HEAT",
            color: colorWaitingHeat,
            text: "Venter på varme",
            waiting: true
        }, {
            name: "WAITING_FOR_PEAK_DETECT",
            color: colorWaitingPeakDetect,
            text: "Venter på toppen",
            waiting: true
        }, {
            name: "COOLING_MIN_TIME",
            color: colorCoolingMinTime,
            text: "Kjøling min tid",
            extending: true
        }, {
            name: "HEATING_MIN_TIME",
            color: colorHeatingMinTime,
            text: "Varme min tid",
            extending: true
        }, {
            name: "INVALID",
            color: colorHeatingMinTime,
            text: "Ugyldig tilstand"
        }];
        BrewChart.Mode = {
            b: "Beer Constant",
            f: "Fridge Constant",
            o: "Off",
            p: "Profile"
        };



        BrewChart.Colors = [ColorBeerSet,ColorBeerTemp, ColorFridgeTemp, ColorFridgeSet, ColorRoomTemp, ColorAuxTemp,ColorGravity, ColorFiltersg,
                        colorPressure,colorPressureSet,colorCarbonation,
                        colorHumidity,colorHumiditySet,colorRoomHumidity,SgChange1Color,SgChange2Color,SgChange3Color];
        BrewChart.Labels = ['Time', 'beerSet', 'beerTemp', 'fridgeTemp', 'fridgeSet', 'roomTemp', 'auxTemp', 'gravity', 'filtersg'];
        BrewChart.ClassLabels = ['', 'beer-set', 'beer-temp', 'fridge-temp', 'fridge-set', 'room-temp', 'aux-temp', 'gravity', 'filtersg',
                            'pressure','pressure-set','carbonation',
                            'humidity','humidity-set','room-humidity','sgchange1','sgchange2','sgchange3'];

        var BeerSetLine = 1;
        var BeerTempLine = 2;
        var FridgeTempLine = 3;
        var FridgeSetLine = 4;
        var RoomTempLine = 5;
        var AuxTempLine = 6;
        var GravityLine = 7;
        var FilteredSgLine = 8;

        var PressureLine = 9;
        var PressureSetLine = 10;
        var CarbonationLine = 11;


        var ChamberHumidityLine = 12;
        var SetHumidityLine = 13;
        var RoomHumidityLine = 14;


        var SgChange1Line = 15;
        var SgChange2Line = 16;
        var SgChange3Line = 17;

        var NumberOfLines =17;



        var PSIDataIndex = 8;

        BrewChart.prototype.clearData = function() {
            this.laststat = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,NaN];
            this.sg = NaN;
            this.og = NaN;
        };

        BrewChart.prototype.setCelius = function(c) {
            this.celius = c;
            this.ylabel(STR.ChartLabel + '(' + (c ? "°C" : "°F") + ')');
        };

        BrewChart.prototype.incTime = function() {
            // format time, use hour and minute only.
            this.ctime += this.interval;
            //	console.log("incTime:"+ this.ctime/this.interval);
        };

        BrewChart.prototype.formatDate = function(d) {
            var HH = d.getHours();
            var MM = d.getMinutes();
            var SS = d.getSeconds();

            function T(x) {
                return (x > 9) ? x : ("0" + x);
            }
            return d.toLocaleDateString() + " " + T(HH) + ":" + T(MM) + ":" + T(SS);
        };

        BrewChart.prototype.formatDuration = function(elapsed) {
            var str = "";
            var days = Math.floor(elapsed / 86400);
            if (days > 0) {
                str = days + "d";
                elapsed -= days * 86400;
            }
            var hours = elapsed / 3600;
            str = str + hours.toFixed(1) + "h";
            return str;
        };

        BrewChart.prototype.showLegend = function(date, row) {
            var d = new Date(date);
            Q(".beer-chart-legend-time").innerHTML = this.formatDate(d);
            if (Q(".beer-chart-legend-elapse")) Q(".beer-chart-legend-elapse").innerHTML = this.formatDuration(d.getTime() / 1000 - this.starttime);

            Q(".chart-legend-row.beer-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, BeerTempLine));
            Q(".chart-legend-row.beer-set .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, BeerSetLine));
            Q(".chart-legend-row.fridge-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, FridgeTempLine));
            Q(".chart-legend-row.fridge-set .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, FridgeSetLine));
            Q(".chart-legend-row.room-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, RoomTempLine));

            Q(".chart-legend-row.aux-temp .legend-value").innerHTML = this.tempFormat(this.chart.getValue(row, AuxTempLine));

            var g = this.chart.getValue(row, GravityLine);
            Q(".chart-legend-row.gravity .legend-value").innerHTML = (!g || isNaN(g)) ? "--" : (this.plato ? g.toFixed(2) + "&deg;P" : g.toFixed(4));
            var filteredG = this.chart.getValue(row, FilteredSgLine);
            Q(".chart-legend-row.filtersg .legend-value").innerHTML = (!filteredG || isNaN(filteredG)) ? "--" : (this.plato ? filteredG.toFixed(2) + "&deg;P" : filteredG.toFixed(4));

            var state = parseInt(this.state[row]);
            if (!isNaN(state)) {
                Q('.beer-chart-state').innerHTML = STATES[state].text;
            }
            if(this.psiAvail){
                var psi = this.pchart.getValue(row, 1);
                Q(".chart-legend-row.pressure .legend-value").innerHTML = (psi == null || isNaN(psi))? "--":psi.toFixed(1);
                var psiSet=this.pchart.getValue(row, 2 );
                Q(".chart-legend-row.pressure-set .legend-value").innerHTML = (psiSet == null || isNaN(psiSet))? "--":Math.round(psiSet);
                var carbo=this.pchart.getValue(row, 3 );
                Q(".chart-legend-row.carbonation .legend-value").innerHTML = (carbo == null || isNaN(carbo))? "--":carbo.toFixed(1);
            }
            if(this.rhValid){
                var rh = this.hchart.getValue(row, 1);
                Q(".chart-legend-row.humidity .legend-value").innerHTML = (isNaN(rh) || rh == null || rh==255)? "--":(rh+"%");
                var sh = this.hchart.getValue(row, 2);
                Q(".chart-legend-row.set-humidity .legend-value").innerHTML = (isNaN(sh) || sh == null || sh==255)? "--":(sh+"%");
                var room = this.hchart.getValue(row, 3);
                Q(".chart-legend-row.room-humidity .legend-value").innerHTML = (isNaN(room) || room == null || room==255)? "--":(room+"%");
            }

            if(this.GravityChangeChart){
                var v1 = this.gcchart.getValue(row, 1);
                var v2 = this.gcchart.getValue(row, 2);
                var v3 = this.gcchart.getValue(row, 3);

                Q(".chart-legend-row.sgchange1 .legend-value").innerHTML = ( (isNaN(v1) || v1==null)? "--":v1.toFixed(1)); 
                Q(".chart-legend-row.sgchange2 .legend-value").innerHTML = ( (isNaN(v2) || v2==null)? "--":v2.toFixed(1)); 
                Q(".chart-legend-row.sgchange3 .legend-value").innerHTML = ( (isNaN(v3) || v3==null)? "--":v3.toFixed(1));                      
            }

        };

        BrewChart.prototype.hideLegend = function() {
            var v = document.querySelectorAll(".legend-value");

            v.forEach(function(val) {
                val.innerHTML = "--";
            });
            Q(".beer-chart-legend-time").innerHTML = this.dateLabel; //"Date/Time";
            Q('.beer-chart-state').innerHTML = "Tilstand";
        };

        BrewChart.prototype.tempFormat = function(y) {
            var v = parseFloat(y);
            if (isNaN(v)) return "--";
            var DEG = this.celius ? "&deg;C" : "&deg;F";
            return parseFloat(v).toFixed(2) + DEG;
        };
        BrewChart.prototype.initLegend = function() {
            // init color
            if (Q(".beer-temp .toggle")) {
                for (var i = 1; i < BrewChart.ClassLabels.length; i++) {
                    var label = BrewChart.ClassLabels[i];
                    Q(".chart-legend-row." + label).style.color = BrewChart.Colors[i - 1];
                    Q("." + label + ".toggle").style.backgroundColor = BrewChart.Colors[i - 1];
                }
            }
            this.dateLabel = Q(".beer-chart-legend-time").innerHTML;
        };
        BrewChart.prototype.toggleLine = function(line) {
            var me=this;
            me.shownlist[line] = !me.shownlist[line];
            var divclass = BrewChart.ClassLabels[line];
            
            

            var chart =(line >=SgChange1Line)?   me.gcchart:((line >= ChamberHumidityLine)? me.hchart:(line >= PressureLine)? me.pchart:me.chart);
            var base=(line >=SgChange1Line)?    SgChange1Line:((line >= ChamberHumidityLine)? ChamberHumidityLine:(line >= PressureLine)? PressureLine:1);
            chart.setVisibility(line - base, me.shownlist[line]);

            if (Q("." + divclass + " .toggle")) Q("." + divclass + " .toggle").style.backgroundColor =
                (me.shownlist[line])? Q(".chart-legend-row." + divclass).style.color:"transparent";
        };
        BrewChart.prototype.setLabels = function(y1, y2) {
            this.ylabel = y1;
            this.y2label = y2;
        };
        BrewChart.prototype.setPChart = function(id,label,carbonation) {
            this.pcid=id;
            this.plabel=label;
            this.clabel=carbonation;
        };
        BrewChart.prototype.createPSIChart = function() {
            var t=this;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            document.body.appendChild(ldiv);
            var opt = {
                labels: ["Time","psi","psiset","co2"],
                colors: BrewChart.Colors.slice(PressureLine-1,CarbonationLine),
                connectSeparatedPoints: true,
                ylabel: t.plabel,
                y2label: t.clabel,
                series: {
                    'co2': {
                        axis: 'y2',
                        drawPoints: false
                    }
                }, 

                axisLabelFontSize: 12,
//                animatedZooms: true,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                //displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                axes: {
                    y: {
                        valueFormatter: function(y) {
                            return y.toFixed(1);
                        },
                        axisLabelFormatter: function(y) {
                            return y.toFixed(1);
                        }
                    },
                    y2: {
                        valueFormatter: function(y) {
                            return y.toFixed(1);
                        },
                        axisLabelFormatter: function(y) {
                            return y.toFixed(1);
                        }
                    }
                }, 
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                }
            };
            t.pchart = new Dygraph(document.getElementById(t.pcid), t.psi, opt);
            t.pchart.setVisibility(0,true);
        };
        BrewChart.prototype.createChart = function() {
            var t = this;
            t.initLegend();
            t.shownlist =[];
            for(var i=0;i<=NumberOfLines;i++) t.shownlist.push(true);
            t.showPsi = true;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            var ylabel = (t.ylabel ? t.ylabel : 'Temperature') + '(&deg;' + (t.celius ? 'C' : 'F') + ')';
            var y2label = t.y2label ? t.y2label : 'Gravity';
            document.body.appendChild(ldiv);
            var opt = {
                labels: BrewChart.Labels,
                colors: BrewChart.Colors.slice(0,FilteredSgLine),
                connectSeparatedPoints: true,
                ylabel: ylabel,
                y2label: y2label,
                series: {
                    'gravity': {
                        axis: 'y2',
                        drawPoints: true,
                        pointSize: 2,
                        highlightCircleSize: 4
                    },
                    'filtersg': {
                        axis: 'y2',
                    }
                },
                axisLabelFontSize: 12,
                animatedZooms: true,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                axes: {
                    y: {
                        valueFormatter: function(y) {
                            return t.tempFormat(y);
                        }
                    },
                    y2: {
                        valueFormatter: function(y) {
                            return t.plato ? y.toFixed(1) : y.toFixed(3);
                        },
                        axisLabelFormatter: function(y) {
                            var range = this.yAxisRange(1);
                            if (t.plato) return (range[1] - range[0] > 1) ? y.toFixed(1) : y.toFixed(2);

                            if (range[1] - range[0] > 0.002)
                                return y.toFixed(3).substring(1);
                            else
                                return y.toFixed(4).substring(2);
                        }
                    }
                },
                highlightCircleSize: 2,
                highlightSeriesOpts: {
                    strokeWidth: 1.5,
                    strokeBorderWidth: 1,
                    highlightCircleSize: 5
                },
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                },
                underlayCallback: function(ctx, area, graph) {
                        ctx.save();
                        try {
                            t.drawBackground(ctx, area, graph);
                        } finally {
                            ctx.restore();
                        }
                }
/*                ,
                interactionModel:{ 
                    mousedown: Dygraph.defaultInteractionModel.mousedown, 
                    mousemove: Dygraph.defaultInteractionModel.mousemove, 
                    mouseup: Dygraph.defaultInteractionModel.mouseup, 
//                    touchstart:Dygraph.defaultInteractionModel.touchstart,
                    touchstart: function(event, g, context){
                        event.stopPropagation();
                        t.chart.setSelection(t.findNearestRow(g,t.chart.toDataXCoord(event.touches[0].clientX)));
                    }, 
                    touchend: Dygraph.defaultInteractionModel.mouseup, 
//                    touchend:function(event,g,context){
//                    },
//                    touchmove: Dygraph.defaultInteractionModel.touchmove
                    touchmove:function(event,g,context){
                        event.stopPropagation();
                        t.chart.setSelection(t.findNearestRow(g,t.chart.toDataXCoord(event.touches[0].clientX)));
                    }
                }
*/
                    /*                drawCallback: function(beerChart, is_initial) {
                                        if (is_initial) {
                                            if (t.anno.length > 0) {
                                                t.chart.setAnnotations(t.anno);
                                            }
                                        }
                                    }*/
            };
            t.chart = new Dygraph(document.getElementById(t.cid), t.data, opt);
        };
        BrewChart.prototype.getGravityOfTime=function(time,filtered=true){
            if(typeof filtered == "undefined") filtered=true;
            var duration =  this.ctime - time;
            return this.getGravityBefore(duration>0? duration:0,filtered);
        };
        BrewChart.prototype.getGravityBefore=function(duration,filtered){
            if(typeof filtered == "undefined") filtered=true;
            var row = this.data.length - Math.round(duration/this.interval);
            var index=filtered? FilteredSgLine:GravityLine;
            while(row>=0){
                var gravity=this.data[row][index];
                if(gravity != null) return gravity;
                row--;
            }
            return NaN;
        };
        
        BrewChart.prototype.findNearestRow = function(g, time) {
            "use strict";
            var low = 0,
                high = g.numRows() - 1;
            var mid, comparison;

            while (low < high) {
                mid = Math.floor((low + high) / 2);
                comparison = g.getValue(mid, 0) - time;
                if (comparison < 0) {
                    low = mid + 1;
                    continue;
                }
                if (comparison > 0) {
                    high = mid - 1;
                    continue;
                }
                return mid;
            }
            return low;
        };
        BrewChart.prototype.findStateBlocks = function(g, start, end) {
            "use strict";
            var result = [];
            var state = this.state[start]; //getState(g, start);             // current state
            var newState;
            for (var i = start; i < end; i++) { // find the next change
                newState = this.state[i]; //getState(g, i);
                if (newState !== state) {
                    result.push({
                        row: i,
                        state: state
                    });
                    state = newState;
                }
            }
            result.push({
                row: end,
                state: state
            });
            return result;
        };
        BrewChart.prototype.getTime = function(g, row) {
            "use strict";
            if (row >= g.numRows()) {
                row = g.numRows() - 1;
            }
            return g.getValue(row, 0);
        };
        BrewChart.prototype.drawBackground = function(ctx, area, graph) {
            var timeStart = graph.toDataXCoord(area.x);
            var timeEnd = graph.toDataXCoord(area.x + area.w);
            // the data rows for the range we are interested in. 0-based index. This is deliberately extended out one row
            // to be sure the range is included
            var rowStart = Math.max(this.findNearestRow(graph, timeStart) - 1, 0);
            var rowEnd = this.findNearestRow(graph, timeEnd) + 1;
            if (rowStart === null || rowEnd === null) {
                return;
            }
            var blocks = this.findStateBlocks(graph, rowStart, rowEnd); // rowEnd is exclusive

            var startX = 0; // start drawing from 0 - the far left
            for (var i = 0; i < blocks.length; i++) {
                var block = blocks[i];
                var row = block.row; // where this state run ends
                var t = this.getTime(graph, row); // convert to time. Using time ensures the display matches the plotted resolution
                // of the graph.
                var r = (t - timeStart) / (timeEnd - timeStart); // as a fraction of the entire display
                var endX = Math.floor(area.x + (area.w * r));

                var state = STATES[parseInt(block.state, 10)];
                if (state === undefined) {
                    state = STATES[0];
                }
                //var borderColor = (state.waiting || state.extending) ? setAlphaFactor(state.color, 0.5) : undefined;
                //var bgColor = (state.waiting) ? bgColor = colorIdle : state.color;
                ctx.fillStyle = state.color;
                ctx.fillRect(startX, area.h - STATE_LINE_WIDTH, endX - startX, area.h);
                startX = endX;
            }
        };
        BrewChart.prototype.addMode = function(m, x) {
            var s = String.fromCharCode(m);
            this.anno.push({
                series: "beerTemp",
                x: x,
                shortText: s.toUpperCase(),
                text: BrewChart.Mode[s],
                attachAtBottom: true
            });
        };

        BrewChart.testData = function(data) {
            if (data[0] != 0xFF) return false;
            var s = data[1] & 0x07;
            if (s != CHART_VERSION) return false;

            return {
                sensor: s,
                f: data[1] & 0x10
            };
        };

        BrewChart.prototype.addResume = function(delta) {
            this.anno.push({
                series: "beerTemp",
                x: this.ctime * 1000,
                shortText: 'R',
                text: 'Resume',
                attachAtBottom: true
            });
        };

        BrewChart.prototype.getTiltAround = function(idx) {
            var t = this;
            var left = -1;
            var right = -1;

            if (t.angles[idx] != null) return [t.angles[idx], t.data[idx][AuxTempLine]];

            for (var i = idx - 1; i >= 0; i--) {
                if (t.angles[i] != null) {
                    left = i;
                    break;
                }
            }
            for (var i = idx + 1; i < t.angles.length > 0; i++) {
                if (t.angles[i] != null) {
                    right = i;
                    break;
                }
            }
            if (left < 0 && right < 0) return null;
            if (left < 0) return [t.angles[right], t.data[right][AuxTempLine]];
            if (right < 0) return [t.angles[left], t.data[left][AuxTempLine]];
            return [t.angles[left] + (t.angles[right] - t.angles[left]) / (right - left) * (idx - left),
                (t.data[left][AuxTempLine] + t.data[right][AuxTempLine]) / 2
            ];
        };

        BrewChart.prototype.getCalibration = function() {
            var pairs = [];
            for (var i = 0; i < this.data.length; i++) {
                if (this.rawSG[i]) {
                    var data = this.getTiltAround(i);
                    // corrected the reading into current beer data
                    if (data) {
                        var beerTemp = this.celius ? C2F(data[1]) : data[1];
                        var gravity = this.rawSG[i];
                        var converted;
                        if (this.plato)
                            converted = BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(gravity), C2F(this.coTemp), beerTemp));
                        else converted = BrewMath.tempCorrectionF(gravity, C2F(this.coTemp), beerTemp);
                        pairs.push([data[0], converted]);
                    }
                }
            }
            pairs.push([this.tiltInWater, this.readingInWater]);
            return pairs;
        };
        BrewChart.prototype.filterPoints = function(points, mask) {
            var nps = [];
            for (var i = 0; i < points.length; i++) {
                if (!(mask & (0x1 << i))) nps.push(points[i]);
            }
            return nps;
        };

        BrewChart.prototype.setIgnoredMask = function(mask) {
            if (this.cal_igmask == mask) return false;
            this.cal_igmask = mask;
            return true;
        };

        BrewChart.prototype.getFormula = function() {
            var points = this.getCalibration();
            if (points.length < 2) return;
            var cpoints = this.filterPoints(points, this.cal_igmask);
            if (cpoints.length < 2) {
                cpoints = points;
                this.cal_igmask = 0;
            }
            var poly = regression('polynomial', cpoints, (cpoints.length > 3) ?
                3 : ((cpoints.length > 2) ? 2 : 1), {
                    precision: 9
                });
            this.calibrationPoints = points;
            //this.equation = poly.equation;
            this.calculateSG = true;

            this.sgByTilt = (cpoints.length > 3) ?
                function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x +
                        poly.equation[2] * x * x +
                        poly.equation[3] * x * x * x;
                } : ((cpoints.length > 2) ? function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x +
                        poly.equation[2] * x * x;
                } : function(x) {
                    return poly.equation[0] +
                        poly.equation[1] * x;
                });

            this.coefficients = (cpoints.length > 3) ? [poly.equation[0], poly.equation[1], poly.equation[2], poly.equation[3]] :
                ((cpoints.length > 2) ? [poly.equation[0], poly.equation[1], poly.equation[2], 0] : [poly.equation[0], poly.equation[1], 0, 0]);
            this.npt = points.length;
        };
        BrewChart.prototype.process = function(data) {
            var newchart = false;
            var sgPoint = false;
            var t = this;
            //t.raw = data;
            t.filterSg = null;
            for (var i = 0; i < data.length;) {
                var d0 = data[i++];
                var d1 = data[i++];
                if (d0 == 0xFF) { // header. 
                    if ((d1 & 0xF) != CHART_VERSION) {
                        alert("Loggversjonen er ikke tilpasset!");
                        return;
                    }
                    //console.log(""+t.ctime/t.interval +" header");
                    t.celius = (d1 & 0x10) ? false : true;
                    t.calibrating = (d1 & 0x20) ? false : true;
                    t.plato = (d1 & 0x40) ? false : true;

                    var p = data[i++];
                    p = p * 256 + data[i++];
                    t.interval = p;
                    // 
                    t.starttime = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];
                    t.ctime = t.starttime;
                    i += 4;
                    t.data = [];
                    t.anno = [];
                    t.state = [];
                    t.angles = [];
                    t.rawSG = [];
                    t.psi = [];
                    t.cstate = 0;
                    t.coTemp = 20;
                    t.cal_igmask = 0;
                    t.specificGravity = null;
                    t.rh=[];
                    t.lastRh=255;
                    t.lastRoomRh=255;
                    t.lastSetRh=255;
                    t.rhValid=false;
                    t.gravityChanges=[];

                    t.targetPsi = NaN; // to denote "no line/point"

                    this.clearData();
                    newchart = true;
                    t.psiAvail = false;
                    // gravity tracking
                    GravityFilter.reset();
                    // gravity tracking
                } else if (d0 == 0xF3) { // correction temperature
                    t.coTemp = d1; // always celisus
                } else if (d0 == 0xF4) { // mode
                    //console.log(""+t.ctime/t.interval +" Stage:"+d1);
                    t.addMode(d1, t.ctime * 1000);
                } else if (d0 == 0xF5) { // targetPSI
                    t.targetPsi = (d1==0)? NaN:d1;
                } else if (d0 == 0xF1) { // state
                    t.cstate = d1;
                } else if (d0 == 0xF6) { // Time Sync
                    var utime = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];
                    if(utime > t.ctime) t.ctime =utime;
                } else if (d0 == 0xFE) { // resume
                    t.lidx = 0;
                    var d2 = data[i++];
                    var d3 = data[i++];
                    var tdiff = d3 + (d2 << 8) + (d1 << 16);
                    if(tdiff > 30*24*60*60) tdiff= 30*60; // it's wrong if it's too long.
                    var ntime = t.starttime + tdiff;
                    if (ntime > t.ctime) {
                        // add a gap to it                   
                        t.data.push([new Date(t.ctime * 1000), NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN]);
                        t.psi.push( [new Date(t.ctime * 1000),  NaN,NaN,NaN]);
                        t.state.push(null);
                        t.angles.push(null);
                        t.rawSG.push[null];

                        if (ntime - t.ctime > t.interval)
                            t.ctime = ntime;
                        else
                            t.ctime += t.interval;
                    }
                    t.addResume(d1);
                    // drop the data
                    /*
                    if (t.lidx) {
                        var idx;
                        for (idx = t.lidx; idx < t.numLine; idx++) t.dataset.push(NaN);
                        t.data.push(t.dataset);
                        t.state.push(null);
                        t.angles.push(null);
                        t.rawSG.push[null];
                    }*/
                } else if (d0 == 0xFC) { //Humidity
                    
                    if(d1 != 0xFF){
                        if(d1 & 0x80){ // room
                            t.lastRoomRh = d1 & 0x7F;
                            t.rhValid=true;
                        }else{
                            t.lastRh = d1;
                            t.rhValid=true;
                        }
                    }else if(t.rhValid){
                        t.lastRh = d1;
                    }
                } else if (d0 == 0xFD) { //Humidity target
                    t.lastSetRh = d1;
                } else if (d0 == 0xF8) { //OG
                    var hh = data[i++];
                    var ll = data[i++];
                    var v = (hh & 0x7F) * 256 + ll;
                    t.og = t.plato ? v / 100 : v / 10000;
                } else if (d0 == 0xFB) { //SG
                    var hh = data[i++];
                    var ll = data[i++];
                    var v = (hh & 0x7F) * 256 + ll;
                    if(t.plato){
                        // negative value in two's complement
                        t.specificGravity = (v>16383)?  ((v- 32768)/100):(v / 100);
                    }else{
                        t.specificGravity =  v / 10000;
                    }
                    // setting sgPoint is useless in this version, because the data isnot yet push into array
                    //sgPoint = true;
                } else if (d0 == 0xFA) { //Ignored mask
                    var b2 = data[i++];
                    var b3 = data[i++];
                    t.cal_igmask = (d1 << 14) + (b2 << 7) + b3;
                } else if (d0 == 0xF9) { //Tilt in water
                    var hh = data[i++];
                    var ll = data[i++];
                    var v = (hh & 0x7F) * 256 + ll;
                    t.tiltInWater = v / 100;
                    //
                    if (t.plato) t.readingInWater = 0;
                    else t.readingInWater = (d1 == 0) ? 1.0 : (0.9 + d1 / 1000);
                } else if (d0 == 0xF0) { // record
                    t.changes = d1;
                    t.lidx = 0;
                    var d = new Date(this.ctime * 1000);
                    //t.incTime(); // add one time interval
                    t.dataset = [d];
                    if(t.processRecord() && t.calibrating) sgPoint=true;
                    
                } else if (d0 < 128) { // temp. or gravity
                    var tp = d0 * 256 + d1;
                    if (t.lidx == GravityAndTiltIndex) {
                        // gravity or gravity
                        if(t.calibrating){
                            // tilt value
                            tp = (tp == 0x7FFF) ? NaN : (tp / 100);
                        }else{
                            tp = (tp == 0x7FFF) ? NaN : (t.plato ? tp / 100 : ((tp > 8000) ? tp / 10000 : tp / 1000));
                            sgPoint = true;
                        }
                    } else if (t.lidx == PSIIndex) {
                        // pressure
                        if(tp == 0x7FFF) tp=null;
                        else tp =  tp / 10 - 100;
                        
                    } else {
                        // temperature
                        tp = (tp == 0x7FFF) ? NaN : tp / 100;
                        if (tp >= 225) tp = 225 - tp;
                    }

                    if (t.lidx < t.numData) {
                        if (typeof t.dataset != "undefined") {
                            t.dataset.push(tp);
                            t.laststat[t.lidx] = tp;
                            t.lidx++;
                            if(t.processRecord() && t.calibrating) sgPoint=true;
                        } else {
                            console.log("Error: missing tag.");
                        }
                    } else {
                        console.log("Error: data overlap?");
                    }
                }
            }
            return {
                nc: newchart,
                sg: sgPoint
            };
        };
        BrewChart.prototype.getXRange = function() {
            if (typeof this.chart == "undefined") return [0, 0];
            return this.chart.xAxisRange();
        };
        BrewChart.prototype.setXRange = function(range) {
            if (typeof this.chart == "undefined") return;
            this.chart.updateOptions({ dateWindow: range });
        };
        BrewChart.prototype.desync=function(){
            if(typeof this.sync != "undefined") this.sync.detach();
        };
        BrewChart.prototype.synchronize=function(){
            var t=this;
            var charts=[t.chart];
            if(t.GravityChangeChart) charts.push(t.gcchart);
            if(t.psiAvail) charts.push(t.pchart);
            if(t.rhValid) charts.push(t.hchart);
            if(charts.length >1) t.sync = Dygraph.synchronize(charts,{selection: true,zoom:true,range:false});
        };
        BrewChart.prototype.updateChart = function() {
            var t = this;
            if (typeof t.chart == "undefined") t.createChart();
            else t.chart.updateOptions({
                'file': t.data
            });
            t.chart.setAnnotations(t.anno);

            var sync=false;
            if(t.GravityChangeChart){
                if(typeof t.gcchart == "undefined"){
                    document.querySelectorAll(".sgchange-group").forEach(function(ele){
                        ele.classList.remove("forced-hidden");
                    });
                    t.createGravityChangeChart();
                    sync=true;
                }else{
                    t.gcchart.updateOptions({
                        'file': t.gravityChanges,
                        'dateWindow':[t.psi[0][0],t.psi[t.psi.length-1][0]]
                    });
                }
            }

            if(t.psiAvail){
                if(typeof t.pchart == "undefined"){
                    document.querySelectorAll(".pressure-group").forEach(function(ele){
                        ele.classList.remove("forced-hidden");
                    });

                    t.createPSIChart();
                    sync=true;  
                }
                else t.pchart.updateOptions({
                    'file': t.psi,
                    'dateWindow':[t.psi[0][0],t.psi[t.psi.length-1][0]]
                });
            }

            if(t.rhValid){
                if(typeof t.hchart == "undefined"){
                    document.querySelectorAll(".humidity-group").forEach(function(ele){
                        ele.classList.remove("forced-hidden");
                    });

                    t.createHumidityChart();
                    sync=true;  
                }
                else t.hchart.updateOptions({
                    'file': t.rh,
                    'dateWindow':[t.rh[0][0],t.rh[t.rh.length-1][0]]                    
                });
            }

            if(sync) t.synchronize();

        };
        BrewChart.prototype.processRecord = function() {
            var t = this;
            // fill blank/unchanged fileds by checking the change mask(t.chnages)
            while ((((1 << t.lidx) & t.changes) == 0) && t.lidx < t.numData) {
                // gravity data is independant, use "null" to connect the line. (NaN) to disconnect.
                t.dataset.push((t.lidx > RoomTemperatureIndex && t.lidx != PSIDataIndex) ? null : t.laststat[t.lidx]);
                t.lidx++;
            }
            if (t.lidx >= t.numData) {
               // already get all data in a period record
                // get all data
                var minuteRecord = t.dataset.slice(0, 8);
    
                // handle gravity
                //  1. calculated
                //  2. in period record
                //  3. in special record
                
                var sg = NaN;
                var gravityTilt = t.dataset[GravityLine];
                if(! t.calibrating){
                    if(gravityTilt != null) sg = gravityTilt;
                }else{ 
                    // calibrating
                    if (!t.calculateSG) {
                        // calibrating, but not having formula
                        // if "gravity" data is available and currently not "calculating"(first run or not calibrating)
                        //sg = t.specificGravity;
                        // it's tilt data */
                        minuteRecord[GravityLine] = null;
                    } else {
                        //if (t.calculateSG) 
                        // must be in calibrating mode
                        // data field #8 is tilt in source data
                        if (minuteRecord[GravityLine] != null){
                            var temp = (this.celius) ? C2F(t.dataset[AuxTempLine]) : t.dataset[AuxTempLine];
                            sg = t.sgByTilt(t.dataset[GravityLine]);

                            if (t.plato) {
                                sg = BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(sg), temp, C2F(t.coTemp)));
                            }
                            minuteRecord[GravityLine] = sg;
                        }
                    }
                }
                if (!isNaN(sg)) {
                    t.sg = sg;
                    t.filterSg = GravityFilter.add(sg);
                }

                if (!isNaN(t.sg)) minuteRecord.push(t.filterSg);
                else minuteRecord.push(null);

                if(! isNaN(t.dataset[PSIDataIndex]) && t.dataset[PSIDataIndex]!=null) t.psiAvail = true;

                var vol =null;
                if(! isNaN(t.dataset[PSIDataIndex]) && t.dataset[PSIDataIndex]!=null){
                    if(!isNaN(t.dataset[BeerTempLine])){
                        var T = (t.celius)? C2F(t.dataset[BeerTempLine]):t.dataset[BeerTempLine];
                        vol = (t.dataset[PSIDataIndex] + 14.695) * (0.01821 + 0.090115 * Math.exp( (32 - T)/43.11 )) - 0.003342;
                        vol = Math.round(vol * 10)/10.0;
                    }
                }
                t.psi.push( [t.dataset[0], t.dataset[PSIDataIndex],t.targetPsi,vol]);
                
                t.data.push(minuteRecord);
                t.state.push(t.cstate);
                var ret=false;
                if(t.calibrating){
                    t.angles.push(gravityTilt);
                    t.rawSG.push(t.specificGravity);
                    if(t.specificGravity != null) ret =true;
                    t.specificGravity = null;
                }
                // humidity
                t.rh.push([t.dataset[0],
                        (t.lastRh <=100)? t.lastRh:NaN,
                        (t.lastSetRh<=100)? t.lastSetRh:NaN,
                        (t.lastRoomRh <=100)? t.lastRoomRh:NaN]);
                
                
                if(t.GravityChangeChart){
                    function GD(p){
                        var v=t.getGravityBefore(p);
                        if(isNaN(v)) return NaN;
                        if(t.plato) return v-t.filterSg;
                        return (v-t.filterSg)*1000;
                    }

                    if (!isNaN(sg)){
                        t.gravityChanges.push([t.dataset[0],
                            GD(GravityChangePeriod1),
                            GD(GravityChangePeriod2),
                            GD(GravityChangePeriod3)
                            ]);
                        
                    } else t.gravityChanges.push([t.dataset[0], null,null,null]);
                }

                t.incTime(); // add one time interval
                return ret;
            }
        };


        BrewChart.prototype.setHChart = function(id,label) {
            this.hcid=id;
            this.hlabel=label;
        };
        BrewChart.prototype.createHumidityChart = function() {
            var t=this;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            document.body.appendChild(ldiv);

            t.hchart = new Dygraph(document.getElementById(t.hcid), t.rh, {
                labels: ["Time","rh","set","Room"],
                colors: BrewChart.Colors.slice(ChamberHumidityLine-1,RoomHumidityLine),
                connectSeparatedPoints: true,
                ylabel: t.hlabel,
                y2label: "%",
                axisLabelFontSize: 12,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                //displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                }
            });
            t.hchart.setVisibility(0,true);
        };
        BrewChart.prototype.setGcChart = function(id,label) {
            this.gccid=id;
            this.gclabel=label;
        };

        BrewChart.prototype.createGravityChangeChart = function() {
            var t=this;
            var ldiv = document.createElement("div");
            ldiv.className = "hide";
            document.body.appendChild(ldiv);

            t.gcchart = new Dygraph(document.getElementById(t.gccid), t.gravityChanges, {
                labels: ["Time","gc3","gc6","gc12"],
                colors: [SgChange1Color,SgChange2Color,SgChange3Color],
                connectSeparatedPoints: true,
                ylabel: t.gclabel,
                y2label: t.gclabel,
                series: {
                    'gc12': {
                        axis: 'y2',
                        drawPoints: false
                    }
                }, 

                axisLabelFontSize: 12,
                gridLineColor: '#ccc',
                gridLineWidth: '0.1px',
                labelsDiv: ldiv,
                labelsDivStyles: {
                    'display': 'none'
                },
                //displayAnnotations: true,
                //showRangeSelector: true,
                strokeWidth: 1,
                axes: {
                    y: {
                        valueFormatter: function(y) {
                            return y.toFixed(1);
                        },
                        axisLabelFormatter: function(y) {
                            return y.toFixed(1);
                        }
                    },
                    y2: {
                        valueFormatter: function(y) {
                            return y.toFixed(1);
                        },
                        axisLabelFormatter: function(y) {
                            return y.toFixed(1);
                        }
                    }
                }, 
                highlightCallback: function(e, x, pts, row) {
                    t.showLegend(x, row);
                },
                unhighlightCallback: function(e) {
                    t.hideLegend();
                }
            });
            t.gcchart.setVisibility(0,true);
        };

        /* end of chart.js */</script><script>!function(n,r){"function"==typeof define&&define.amd?define("regression",r):"undefined"!=typeof module?module.exports=r():n.regression=r()}(this,function(){"use strict";function n(n,r){var t=n.reduce(function(n,r){return n+r[1]},0)/n.length,o=n.reduce(function(n,r){var o=r[1]-t;return n+o*o},0);return 1-n.reduce(function(n,t,o){var e=r[o],i=t[1]-e[1];return n+i*i},0)/o}function r(n,r){var t=Math.pow(10,r);return Math.round(n*t)/t}var t={linear:function(t,o,e){for(var i,u,a,l=[0,0,0,0,0],p=t.length,f=0;p>f;f++)null!==t[f][1]&&(l[0]+=t[f][0],l[1]+=t[f][1],l[2]+=t[f][0]*t[f][0],l[3]+=t[f][0]*t[f][1],l[4]+=t[f][1]*t[f][1]);return u=(p*l[3]-l[0]*l[1])/(p*l[2]-l[0]*l[0]),a=l[1]/p-u*l[0]/p,{r2:n(t,i=t.map(function(n){var r=n[0];return[r,u*r+a]})),equation:[u,a],points:i,string:"y = "+r(u,e.precision)+"x + "+r(a,e.precision)}},linearthroughorigin:function(t,o,e){for(var i,u,a=[0,0],l=0;l<t.length;l++)null!==t[l][1]&&(a[0]+=t[l][0]*t[l][0],a[1]+=t[l][0]*t[l][1]);return i=a[1]/a[0],{r2:n(t,u=t.map(function(n){var r=n[0];return[r,i*r]})),equation:[i],points:u,string:"y = "+r(i,e.precision)+"x"}},exponential:function(t,o,e){for(var i,u,a,l,p=[0,0,0,0,0,0],f=0;f<t.length;f++)null!==t[f][1]&&(p[0]+=t[f][0],p[1]+=t[f][1],p[2]+=t[f][0]*t[f][0]*t[f][1],p[3]+=t[f][1]*Math.log(t[f][1]),p[4]+=t[f][0]*t[f][1]*Math.log(t[f][1]),p[5]+=t[f][0]*t[f][1]);return i=p[1]*p[2]-p[5]*p[5],u=Math.exp((p[2]*p[3]-p[5]*p[4])/i),a=(p[1]*p[4]-p[5]*p[3])/i,{r2:n(t,l=t.map(function(n){var r=n[0];return[r,u*Math.exp(a*r)]})),equation:[u,a],points:l,string:"y = "+r(u,e.precision)+"e^("+r(a,e.precision)+"x)"}},logarithmic:function(t,o,e){for(var i,u,a,l=[0,0,0,0],p=t.length,f=0;p>f;f++)null!==t[f][1]&&(l[0]+=Math.log(t[f][0]),l[1]+=t[f][1]*Math.log(t[f][0]),l[2]+=t[f][1],l[3]+=Math.pow(Math.log(t[f][0]),2));return u=(p*l[1]-l[2]*l[0])/(p*l[3]-l[0]*l[0]),i=(l[2]-u*l[0])/p,{r2:n(t,a=t.map(function(n){var r=n[0];return[r,i+u*Math.log(r)]})),equation:[i,u],points:a,string:"y = "+r(i,e.precision)+" + "+r(u,e.precision)+" ln(x)"}},power:function(t,o,e){for(var i,u,a,l=[0,0,0,0],p=t.length,f=0;p>f;f++)null!==t[f][1]&&(l[0]+=Math.log(t[f][0]),l[1]+=Math.log(t[f][1])*Math.log(t[f][0]),l[2]+=Math.log(t[f][1]),l[3]+=Math.pow(Math.log(t[f][0]),2));return u=(p*l[1]-l[2]*l[0])/(p*l[3]-l[0]*l[0]),i=Math.exp((l[2]-u*l[0])/p),{r2:n(t,a=t.map(function(n){var r=n[0];return[r,i*Math.pow(r,u)]})),equation:[i,u],points:a,string:"y = "+r(i,e.precision)+"x^"+r(u,e.precision)}},polynomial:function(t,o,e){var i,u,a,l,p,f,s,c,h=[],g=[],M=0,v=0,d=t.length;for(u=void 0===o?3:o+1,a=0;u>a;a++){for(p=0;d>p;p++)null!==t[p][1]&&(M+=Math.pow(t[p][0],a)*t[p][1]);for(h.push(M),M=0,i=[],l=0;u>l;l++){for(p=0;d>p;p++)null!==t[p][1]&&(v+=Math.pow(t[p][0],a+l));i.push(v),v=0}g.push(i)}for(g.push(h),s=function(n,r){var t=0,o=0,e=0,i=0,u=0,a=n.length-1,l=new Array(r);for(t=0;a>t;t++){for(i=t,o=t+1;a>o;o++)Math.abs(n[t][o])>Math.abs(n[t][i])&&(i=o);for(e=t;a+1>e;e++)u=n[e][t],n[e][t]=n[e][i],n[e][i]=u;for(o=t+1;a>o;o++)for(e=a;e>=t;e--)n[e][o]-=n[e][t]*n[t][o]/n[t][t]}for(o=a-1;o>=0;o--){for(u=0,e=o+1;a>e;e++)u+=n[e][o]*l[e];l[o]=(n[a][o]-u)/n[o][o]}return l}(g,u),f=t.map(function(n){var r=n[0],t=s.reduce(function(n,t,o){return n+t*Math.pow(r,o)},0);return[r,t]}),c="y = ",a=s.length-1;a>=0;a--)c+=a>1?r(s[a],e.precision)+"x^"+a+" + ":1===a?r(s[a],e.precision)+"x + ":r(s[a],e.precision);return{r2:n(t,f),equation:s,points:f,string:c}},lastvalue:function(t,o,e){for(var i=[],u=null,a=0;a<t.length;a++)null!==t[a][1]&&isFinite(t[a][1])?(u=t[a][1],i.push([t[a][0],t[a][1]])):i.push([t[a][0],u]);return{r2:n(t,i),equation:[u],points:i,string:""+r(u,e.precision)}}};return function(n,r,o,e){var i="object"==typeof o&&void 0===e?o:e||{};return i.precision||(i.precision=2),"string"==typeof n?t[n.toLowerCase()](r,o,i):null}})</script><script>var PolyRegression={allpoints:[],clear:function(){for(var t=document.getElementById("pointlist").getElementsByTagName("tbody")[0],e=t.querySelectorAll("tr.pl_calpoint"),i=(e.length,e.length-1);i>=0;i--){var o=e[i];o.parentNode.removeChild(o)}return t},newrow:function(t){var e=this.row.cloneNode(!0);e.querySelector("td.pl_tilt").innerHTML=t[0].toFixed(2),e.querySelector("td.pl_sg").innerHTML=this.plato?t[1].toFixed(2):t[1].toFixed(4),e.querySelector("td.pl_value").innerHTML=this.plato?t[2].toFixed(2):t[2].toFixed(4),e.querySelector("td.pl_error").innerHTML=this.plato?t[3].toFixed(2):(1e3*t[3]).toFixed(1);var i=e.querySelector("input.pl_ignored_cb");i.checked=t[4];var o=this;return i.onchange=function(){o.igchanged(this)},e},igchanged:function(t){for(var e=document.getElementById("pointlist").getElementsByTagName("tbody")[0].querySelectorAll("input.pl_ignored_cb"),i=0,o=0,n=0;n<e.length;n++)e[n].checked?i|=1<<n:o++;o<2?(console.log("less than 2."),t.checked=!1):(this.cal_igmask=i,this.show())},show:function(){this.row||(this.row=Q("#pointlist tr.pl_calpoint"),this.row.parentNode.removeChild(this.row)),this.getFormula();for(var t=this.clear(),e=0;e<this.ptlist.length;e++)t.appendChild(this.newrow(this.ptlist[e]));this.chart()},getFormula:function(){var t=this;if(!(t.allpoints.length<2)){t.points=[];for(var e=0;e<t.allpoints.length;e++)1<<e&t.cal_igmask||t.points.push(t.allpoints[e]);t.points.length<2&&(t.points=t.alpoints,t.cal_igmask=0);var i=regression("polynomial",t.points,t.points.length>3?3:t.points.length>2?2:1,{precision:9});t.regression=i,Q("#polynormial").innerHTML=i.string,t.sgByTilt=t.points.length>3?function(t){return i.equation[0]+i.equation[1]*t+i.equation[2]*t*t+i.equation[3]*t*t*t}:t.points.length>2?function(t){return i.equation[0]+i.equation[1]*t+i.equation[2]*t*t}:function(t){return i.equation[0]+i.equation[1]*t};var o=[];for(e=0;e<t.allpoints.length;e++){var n=t.allpoints[e][0],l=t.allpoints[e][1],r=t.sgByTilt(n),a=l-r,s=0!=(1<<e&t.cal_igmask);o.push([n,l,r,a,s])}t.ptlist=o}},chart:function(){for(var t=[],e=0;e<this.allpoints.length;e++)t.push([this.ptlist[e][0],this.ptlist[e][1],this.ptlist[e][2]]);void 0===this.graph?this.graph=new Dygraph(document.getElementById("graph"),t,{labels:["Tilt","SG","Interpolated"],colors:["rgb(240, 100, 100)","rgb(89, 184, 255)"],series:{SG:{drawPoints:!0,pointSize:4,strokeWidth:0}},axisLabelFontSize:12,gridLineColor:"#ccc",gridLineWidth:"0.1px",strokeWidth:1,xRangePad:10,axes:{y:{axisLabelWidth:40,axisLabelFormatter:function(t){return t.toFixed(3)},valueFormatter:function(t){return t.toFixed(3)}},x:{pixelsPerLabel:30,axisLabelWidth:40}}}):(this.graph.updateOptions({file:t}),this.graph.resize())}};function applyIgnoreMask(){BChart.setIgnoredMask(PolyRegression.cal_igmask)}function openpolynomialpane(){Q("#polynomialpane").style.display="block",PolyRegression.allpoints=BChart.chart.calibrationPoints,PolyRegression.cal_igmask=BChart.chart.cal_igmask,PolyRegression.plato=BChart.chart.plato,PolyRegression.show()}function closepolynomialpane(){Q("#polynomialpane").style.display="none"}</script><script>var JSVERSION = "4.3";

function s_ajax(b) {
    var c = new XMLHttpRequest();
    c.onreadystatechange = function() {
        if (c.readyState == 4) {
            if (c.status == 200) {
                b.success(c.responseText)
            } else {
                c.onerror(c.status)
            }
        }
    };
    c.ontimeout = function() {
        if (typeof b["timeout"] != "undefined") b.timeout();
        else c.onerror(-1)
    }, c.onerror = function(a) {
        if (typeof b["fail"] != "undefined") b.fail(a)
    };
    c.open(b.m, b.url, true);
    if (typeof b["data"] != "undefined") {
        c.setRequestHeader("Content-Type", (typeof b["mime"] != "undefined") ? b["mime"] : "application/x-www-form-urlencoded");
        c.send(b.data)
    } else c.send()
}

var Q = function(d) {
    return document.querySelector(d);
};

function doAll(c,act){
    document.querySelectorAll(c).forEach(function(i){act(i)});
}

function C2F(c) {
    return Math.round((c * 1.8 + 32) * 10) / 10
}

function F2C(f) {
    return Math.round((f - 32) / 1.8 * 10) / 10
}

function openDlgLoading() {
    document.getElementById('dlg_loading').style.display = "block";
}

function closeDlgLoading() {
    document.getElementById('dlg_loading').style.display = "none";
}

var BrewMath = {
    abv: function(og, fg) {
        return ((76.08 * (og - fg) / (1.775 - og)) * (fg / 0.794)).toFixed(1);
    },
    abvP: function(og, fg) {
        return BrewMath.abv(BrewMath.pla2sg(og), BrewMath.pla2sg(fg));
    },
    att: function(og, fg) {
        return Math.round((og - fg) / (og - 1) * 100);
    },
    attP: function(pog, pfg) {
        return Math.round((pog - pfg) / pog * 100);
    },
    sg2pla: function(sg) {
        return (((182.4601 * sg - 775.6821) * sg + 1262.7794) * sg - 669.5622);
    },
    pla2sg: function(pla) {
        return 1 + (pla / (258.6 - ((pla / 258.2) * 227.1)));
    },
    tempCorrectionF(sg, t, c) {
        var nsg = sg * ((1.00130346 - 0.000134722124 * t + 0.00000204052596 * t * t - 0.00000000232820948 * t * t * t) /
            (1.00130346 - 0.000134722124 * c + 0.00000204052596 * c * c - 0.00000000232820948 * c * c * c));
        return nsg;
    },
    pTempCorrectionF(sg, t, c) {
        return BrewMath.sg2pla(BrewMath.tempCorrectionF(BrewMath.pla2sg(sg), t, c));
    },
    tempCorrection(celsius, sg, t, c) {
        return celsius ? BrewMath.tempCorrectionF(sg, C2F(t), C2F(c)) : BrewMath.tempCorrectionF(sg, t, c);
    },
    pTempCorrection(celsius, sg, t, c) {
        return celsius ? BrewMath.pTempCorrectionF(sg, C2F(t), C2F(c)) : BrewMath.tempCorrectionF(sg, t, c);
    }
};

Date.prototype.shortLocalizedString = function() {
    var y = this.getYear() + 1900;
    var re = new RegExp('[^\d]?' + y + '[^\d]?');
    var n = this.toLocaleDateString();
    var ds = n.replace(re, "");
    var HH = this.getHours();
    var MM = this.getMinutes();

    function T(x) {
        return (x > 9) ? x : ("0" + x);
    }
    return ds + " " + T(HH) + ":" + T(MM);
};

function getActiveNavItem() {
    var path = window.location.pathname.split("/").pop();
    if (path == "") path = "index.htm";
    var element = Q('.options>li>a[href="/' + path + '"]');
    if(element) element.className += 'active';
}

function formatDate(dt) {
    //	var y = dt.getFullYear();
    //	var M = dt.getMonth() +1;
    //	var d = dt.getDate();
    var h = dt.getHours();
    var m = dt.getMinutes();
    //    var s = dt.getSeconds();
    function dd(n) {
        return (n < 10) ? '0' + n : n;
    }
    //	return dd(M) + "/" + dd(d) + "/" + y +" "+ dd(h) +":"+dd(m)+":"+dd(s);
    //	return dd(M) + "/" + dd(d) +" "+ dd(h) +":"+dd(m);
    return dt.toLocaleDateString() + " " + dd(h) + ":" + dd(m);
}

function formatDateForPicker(date) {
    var h = date.getHours();
    var m = date.getMinutes();

    function dd(n) { return (n < 10) ? '0' + n : n; }
    return date.getFullYear() + "-" + dd(date.getMonth() + 1) + "-" + dd(date.getDate()) + "T" + dd(h) + ":" + dd(m);
}</script><script>function TabPane(e){var t=this;function a(e){var a=document.getElementById(e+"-m");a.className.indexOf("nav-selected")<0&&(a.className+=" nav-selected"),document.getElementById(e+"-s").style.display="block",t.cmode=e}t.cmode=null;for(var i=0;i<e.length;i++){var n=e[i];document.getElementById(n+"-s").style.display="none",document.getElementById(n+"-m").onclick=function(){var e,i,n,s=this.id.replace(/-m$/,"");return e=t.cmode,i=document.getElementById(e+"-m"),n=i.className.replace(/\snav-selected/,""),i.className=n,document.getElementById(e+"-s").style.display="none",a(s),!1}}a(e[0]),t.select=a}var Capper={target_psi:0,psi_valid:!1,hidepset:function(e){this.psi_valid=!e,Q(".psi-set-group").style.display=e?"none":"block"},setpsi:function(e){this.target_psi=e,Q("#cappressure").value=e},init:function(){var e=Q(".capping-info-pane");e&&(e.style.display="none");var t=Q("#capper-frame");t&&(t.style.display="none",this.initCtrl())},initCtrl:function(){var e=this;e.tabs=new TabPane(["tab-gravity","tab-time","tab-manual"]);var t=Q("#captimeinput");e.time=new Date,t.onchange=function(){var a=new Date(t.value);isNaN(a.getTime())?e.setInputTime(e.time):e.setInputTime(a)},Q("#cap-apply").onclick=function(){var t=e.psi_valid?"psi="+e.target_psi+"&":"",a=e.tabs.cmode;if("tab-gravity"==a){var i=Q("#capgravityinput").value;e.send(t+"sg="+i)}else if("tab-time"==a){var n=new Date(Q("#captimeinput").value);if(isNaN(n.getTime()))return void alert("Ugyldig tid");e.send(t+"at="+n.getTime()/1e3)}else Q("#capswitch").checked?e.send(t+"cap=1"):e.send(t+"cap=0")},e.hidepset(!0),Q("#cappressure").onchange=function(){e.target_psi=this.value}},send:function(e){console.log("send "+e),s_ajax({url:"cap?"+e,m:"GET",success:function(e){alert("Ferdig!")},fail:function(e){alert("kunne ikke angi Spunding ventil")}})},setcap:function(e){Q("#capstate-open")&&(e?(Q("#capstate-open").style.display="none",Q("#capstate-close").style.display="inline-block"):(Q("#capstate-open").style.display="inline-block",Q("#capstate-close").style.display="none"))},setInputTime:function(e){this.time=e;var t=Q("#captimeinput");t.value="datetime-local"==t.type?formatDateForPicker(e):formatDate(e)},status:function(e){void 0!==e.m&&0!=e.m&&(this.statusInfo(e),this.updateCtrl(e))},statusInfo:function(e){var t=Q(".capping-info-pane");if(t){t.style.display="block",this.setcap(e.c);for(var a=["","cs-manopen","cs-mancap","cs-timecon","cs-sgcon"],i=1;i<a.length;i++)i==e.m?Q("#"+a[i]).style.display="inline-block":Q("#"+a[i]).style.display="none";void 0!==e.g&&(Q("#capgravityset").innerHTML=e.g),void 0!==e.t&&(Q("#captimeset").innerHTML=formatDate(new Date(1e3*e.t)))}},updateCtrl:function(e){var t=Q("#capper-frame");t&&(t.style.display="block",void 0!==e.g&&(Q("#capgravityinput").value=e.g),void 0!==e.t?this.setInputTime(new Date(1e3*e.t)):this.setInputTime(new Date),1==e.m?Q("#capswitch").checked=!1:2==e.m&&(Q("#capswitch").checked=!0),2==e.pm&&(this.hidepset(!1),this.setpsi(e.psi)))},tunit:"C",calpsi:function(){"undefined"!=typeof BrewPiSetting&&(this.tunit=BrewPiSetting.tempUnit),Q("#dlg_carbonation").style.display="block"},calCancel:function(){Q("#dlg_carbonation").style.display="none"},calOk:function(){var e=Q("#carcal-psi").innerHTML;isNaN(e)||this.setpsi(e),Q("#dlg_carbonation").style.display="none"},cal:function(){var e=Q("#carcal-vol").value,t=Q("#carcal-temp").value;"C"==this.tunit&&(t=C2F(t));var a=-16.6999-.0101059*t+.00116512*t*t+.173354*t*e+4.24267*e-.0684226*e*e;Q("#carcal-psi").innerHTML=Math.round(a)}}</script><script>var T_CHART_REQUEST=2e4,T_CHART_RETRYTO=6e3,T_CHART_ZERODATA=1e4,T_CHART_REFRESH=2500,T_CHART_RETRY=1e4,T_LOAD_CHART=150,T_BWF_RECONNECT=1e4,T_BWF_LCD=1e4,BChart={offset:0,url:"chart.php",calibrating:function(){return void 0!==this.chart&&this.chart.calibrating},toggle:function(i){this.chart.toggleLine(i)},updateFormula:function(){var i=this.chart.coefficients,t=this.chart.npt<<24|16777215&this.chart.cal_igmask,e=!0;if(void 0!==window.npt&&window.npt==t&&(e=!1),e){var n="coeff?a0="+i[0].toFixed(9)+"&a1="+i[1].toFixed(9)+"&a2="+i[2].toFixed(9)+"&a3="+i[3].toFixed(9)+"&pt="+t;s_ajax({url:n,m:"GET",success:function(i){window.npt=t},fail:function(i){alert("Kunne ikke oppdatere formelen."+i)}})}},reprocesData:function(){for(var i=this,t=0;t<i.bdata.length;t++)i.chart.process(i.bdata[t])},updateChartResult:function(){var i=this;i.chart.sg&&!isNaN(i.chart.sg)&&(updateGravity(i.chart.sg),gravityChangeUpdate(i.chart.filterSg),i.chart.sg=NaN),i.chart.updateChart()},setIgnoredMask:function(i){var t=this;t.chart.cal_igmask!=i&&(t.chart.calculateSG=!1,t.reprocesData(),t.chart.cal_igmask=i,t.chart.getFormula(),t.reprocesData(),t.updateChartResult(),t.chart.cal_igmask=i,t.updateFormula())},reqdata:function(){var i=this,t="offset="+i.offset;void 0!==i.startOff&&null!==i.startOff&&(t=t+"&index="+i.startOff);var e=new XMLHttpRequest;e.open("GET",i.url+"?"+t),e.timeout=T_CHART_REQUEST,e.responseType="arraybuffer",e.onload=function(t){if(404!=this.status){var n=new Uint8Array(this.response);if(i.offset?i.bdata.push(n):i.bdata=[n],0==n.length)return i.timer&&clearInterval(i.timer),i.timer=null,void setTimeout(function(){i.reqdata()},T_CHART_ZERODATA);var r=i.chart.process(n);if(r.nc)i.offset=n.length,i.startOff=e.getResponseHeader("LogOffset"),i.chart.calibrating&&(i.chart.getFormula(),i.chart.process(n),i.chart.calculateSG&&(Q("#formula-btn").style.display="block",i.updateFormula()));else if(i.offset+=n.length,i.chart.calibrating&&r.sg)return console.log("New SG availbe. reprocess"),i.chart.calculateSG=!1,i.reprocesData(),i.chart.getFormula(),i.reprocesData(),i.updateChartResult(),void i.updateFormula();i.chart.updateChart(),isNaN(i.chart.og)||(updateOriginGravity(i.chart.og),i.chart.og=NaN),i.chart.sg&&!isNaN(i.chart.sg)&&(updateGravity(i.chart.sg),gravityChangeUpdate(i.chart.filterSg),i.chart.sg=NaN),null==i.timer&&i.settimer()}else console.log(" Error getting log data")},e.ontimeout=function(t){console.error("Timeout!"+new Date),null==i.timer&&setTimeout(function(){i.reqdata()},T_CHART_RETRYTO)},e.onerror=function(){console.log("Error getting data"),null==i.timer&&setTimeout(function(){i.reqdata()},T_CHART_RETRY)},e.send()},settimer:function(){var i=this;i.timer=setInterval(function(){i.reqdata()},1e3*i.chart.interval)},init:function(i,t,e,n,r,o,a,l){this.chart=new BrewChart(i),this.chart.setLabels(t,e),void 0!==n&&this.chart.setPChart(n,r,o),void 0!==a&&this.chart.setHChart(a,l)},timer:null,start:function(){this.running||(this.running=!0,this.offset=0,this.reqdata())},reqnow:function(){var i=this;i.timer&&clearInterval(i.timer),i.timer=null,i.reqdata()}};function parseStateSince(i){var t;return(t=/(\d+h\d\dm\d\d)/.exec(i))?t[1]:(t=/(\d+m\d\d)/.exec(i))?t[1]:""}function renderLcdText(i){var t=Q(".error");function e(t){return t<-1e4?"--.-":(t/100).toFixed(1)+"&deg;"+i.tu}t&&(t.style.display="none");var n={};n.ControlStateSince=parseStateSince(i.sl),n.StatusLine=i.sl,n.ControlState=i.st,n.ControlMode=i.md,n.unit=i.tu,n.BeerTemp=e(i.bt),n.BeerSet=e(i.bs),n.FridgeTemp=e(i.ft),n.FridgeSet=e(i.fs),n.RoomTemp=e(i.rt);var r={o:"OFF",b:"Ølkonstant",f:"Kjøleskap konstant",p:"Ølprofil",i:"Invalid"},o=["Venter for {time}","Temp. kontroll av","Døren er åpen","Oppvarming for {time}","Kjøling for {time}","Venter på kjøling {time}","Venter på varme {time}","Venter på toppen","Kjøletid igjen {time}","Kjøletid igjen {time}","Ugyldig tilstand"];if(Object.keys(n).map(function(i,t){var e=Q("#lcd"+i);e&&(e.innerHTML="ControlMode"==i?r[n[i]]:"ControlState"==i?function(i,t){if(void 0===t)return o[i];var e,n="";return(e=/(\d+)h(\d\d)m(\d\d)/.exec(t))?n="{HH} h {MM} m {SS}".replace("{SS}",e[3]).replace("{MM}",e[2]).replace("{HH}",e[1]):(e=/(\d+)m(\d\d)/.exec(t))&&(n="{MM} m {SS}".replace("{SS}",e[2]).replace("{MM}",e[1])),o[i].replace("{time}",n)}(n[i],n.ControlStateSince):n[i])}),void 0!==n.unit&&(window.tempUnit=n.unit),void 0!==n.BeerTemp){var a=/([\d\.]+)/.exec(n.BeerTemp);a.length>0&&(window.beerTemp=a[0])}}var roomOfridge=!1;function simLcd(i){function t(i){if(i<-1e4)return" --.-";for(var t=(i/100).toFixed(1),e="",n=t.length;n<5;n++)e+=" ";return e+t}var e=[];return e[0]="Mode   "+{o:"Off",b:"Beer Const.",f:"Fridge Const.",p:"Beer Profile",i:"Invalid"}[i.md],e[1]="Beer  "+t(i.bt)+" "+t(i.bs)+" &deg;"+i.tu,i.rt>-1e4&&roomOfridge?e[2]="Room  "+t(i.rt)+" "+t(-2e4)+" &deg;"+i.tu:e[2]="Fridge"+t(i.ft)+" "+t(i.fs)+" &deg;"+i.tu,roomOfridge=!roomOfridge,e[3]=i.sl,e}function displayLcdText(i){for(var t=0;t<4;t++){var e=document.getElementById("lcd-line-"+t);e&&(e.innerHTML=i[t])}}function displayLcd(i){window.tempUnit=i.tu,displayLcdText(simLcd(i)),renderLcdText(i)}function hideErrorMsgs(){for(var i=document.querySelectorAll(".errormsg"),t=0;t<i.length;t++)i[t].style.display="none"}function communicationError(){var i=Q(".error");i?(hideErrorMsgs(),Q("#error_connect").style.display="block",i.style.display="block"):displayLcdText(["Failed to","connect to","Server",""])}function controllerError(){var i=Q(".error");i?(hideErrorMsgs(),Q("#error_noupdate").style.display="block",i.style.display="block"):displayLcdText(["Controller not","updating data","...",""])}function checkTime(i,t){var e=new Date,n=0-60*e.getTimezoneOffset(),r=Math.round(e.getTime()/1e3);(t!=n||Math.abs(r-i)>1800)&&s_ajax({url:"time",m:"POST",mime:"application/x-www-form-urlencoded",data:"time="+r+"&off="+n,success:function(){}})}function gravityDevice(i){if(void 0!==i.dev&&(1==i.dev?(Q(".gravity-device-pane").style.display="block",doAll(".ispindel-info",function(i){i.classList.remove("no-display")}),doAll(".tilt-info",function(i){i.classList.add("no-display")})):2==i.dev?(Q(".gravity-device-pane").style.display="block",doAll(".ispindel-info",function(i){i.classList.add("no-display")}),doAll(".tilt-info",function(i){i.classList.remove("no-display")})):Q(".gravity-device-pane").style.display="none"),void 0!==i.plato&&(window.plato=i.plato,window.plato&&showPlatoUnit()),void 0!==i.fpt&&(window.npt=i.fpt),void 0!==i.name)if(void 0!==i.lu){i.name.startsWith("iSpindel")&&void 0===window.iSpindel&&(window.iSpindel=!0,Q("#iSpindel-pane")&&(Q("#iSpindel-pane").style.display="block"));var t=Q("#iSpindel-name");if(t&&(t.innerHTML=i.name),void 0!==i.battery&&Q("#iSpindel-battery")&&i.battery>0&&(Q("#iSpindel-battery").innerHTML=parseFloat(i.battery).toFixed(2)+"V"),i.lu>84879460){var e=void 0!==i.lu?new Date(1e3*i.lu):new Date;Q("#gravity-device-last")&&(Q("#gravity-device-last").innerHTML=e.shortLocalizedString())}!BChart.chart.calibrating&&void 0!==i.sg&&i.sg>0&&(updateGravity(i.sg),gravityChangeUpdate(i.sg)),void 0!==i.angle&&Q("#iSpindel-tilt")&&(Q("#iSpindel-tilt").innerHTML=""+i.angle),void 0!==i.rssi&&Q("#gravity-device-rssi")&&(Q("#gravity-device-rssi").classList.remove("no-display"),wifibar("#gravity-device-rssi",i.rssi)),void 0!==i.lpf&&GravityFilter.setBeta(i.lpf),void 0!==i.ctemp&&(window.caltemp=i.ctemp)}else console.log("iSpindel:"+JSON.stringify(i))}function respPtDiff(i,t){var e=BChart.chart.getGravityOfTime((new Date).getTime()/1e3-t);if(isNaN(e))return"--";var n=e-i;return window.plato?n.toFixed(1):(n*=1e3).toFixed(1)}function gravityChangeUpdate(i){Q("#sgchanged").innerHTML=respPtDiff(i,172800)+"/"+respPtDiff(i,86400)+"/"+respPtDiff(i,43200)}function updateGravity(i){window.sg=i,Q("#gravity-sg").innerHTML=window.plato?i.toFixed(1):i.toFixed(3),void 0!==window.og&&(Q("#gravity-att").innerHTML=window.plato?BrewMath.attP(window.og,i):BrewMath.att(window.og,i),Q("#gravity-abv").innerHTML=window.plato?BrewMath.abvP(window.og,i):BrewMath.abv(window.og,i))}function updateOriginGravity(i){void 0!==window.og&&window.og==i||(window.og=i,Q("#gravity-og").innerHTML=window.plato?i.toFixed(1):i.toFixed(3),void 0!==window.sg&&updateGravity(window.sg))}function showgravitydlg(i){if(Q("#dlg_addgravity .og").style.display="none",Q("#dlg_addgravity .sg").style.display="none",Q("#dlg_addgravity ."+i).style.display="block",Q("#dlg_addgravity").style.display="block",void 0!==window.tempUnit){window.celsius=!1;var t=68;/C$/.test(window.tempUnit)&&(window.celsius=!0,t=20),Q("#dlg_addgravity .tempinput").value=t;for(var e=document.querySelectorAll("#dlg_addgravity .temp-unit"),n=0;n<e.length;n++)e[n].innerHTML=window.tempUnit}else window.celsius=!0}function dismissgravity(){Q("#dlg_addgravity").style.display="none"}function inputsg_change(){var i=parseFloat(Q("#dlg_addgravity .sginput").value),t=parseFloat(Q("#dlg_addgravity .tempinput").value);if(!isNaN(i)&&!isNaN(t)){var e=void 0!==window.caltemp?window.caltemp:20;if(e=window.celsius?e:C2F(e),Q("#sginput-hm-cal-temp").innerHTML=e,window.plato){var n=BrewMath.pTempCorrection(window.celsius,i,t,e);Q("#sginput-hmc").innerHTML=n.toFixed(2)}else{n=BrewMath.tempCorrection(window.celsius,i,t,e);Q("#sginput-hmc").innerHTML=n.toFixed(3)}if(void 0!==window.beerTemp)if(Q("#sginput-ispindel-temp").innerHTML=window.beerTemp,window.plato){var r=BrewMath.pTempCorrection(window.celsius,i,t,window.beerTemp);Q("#sginput-sg-ispindel").innerHTML=r.toFixed(2)}else{r=BrewMath.tempCorrection(window.celsius,i,t,window.beerTemp);Q("#sginput-sg-ispindel").innerHTML=r.toFixed(3)}}}function inputgravity(){var i=parseFloat(Q("#sginput-hmc").innerHTML);if(window.plato||!(i<.8||i>1.25)){dismissgravity(),openDlgLoading(),window.isog?updateOriginGravity(i):(updateGravity(i),gravityChangeUpdate(i));var t={name:"webjs",gravity:i};window.isog&&(t.og=1),window.plato&&(t.plato=1),s_ajax({url:"gravity",m:"POST",mime:"application/json",data:JSON.stringify(t),success:function(i){closeDlgLoading(),setTimeout(function(){BChart.chart.calibrating&&BChart.reqnow()},T_CHART_REFRESH)},fail:function(i){alert("feilet:"+i),closeDlgLoading()}})}}function inputSG(){window.isog=!1,showgravitydlg("sg")}function inputOG(){window.isog=!0,showgravitydlg("og")}function wifibar(i,t,e){for(var n=void 0===e?[-1e3,-90,-80,-70,-67]:[-1e3,-80,-70,-60],r=4;r>=0&&!(n[r]<t);r--);for(var o=Q(i).getElementsByClassName("rssi-bar"),a=0;a<o.length;a++)o[a].style.backgroundColor=a<r?window.rssiBarColor:"rgba(255,255,255,0.05)";Q(i).title=t>0?"?":Math.min(Math.max(2*(t+100),0),100)}function displayrssi(i){Q("#rssi").title=i>0?"?":Math.min(Math.max(2*(i+100),0),100),wifibar("#rssi",i),Q("#wifisignal")&&(Q("#wifisignal").innerHTML=i>0?"?":Math.min(Math.max(2*(i+100),0),100))}function initRssi(){var i=Q("#rssi");window.rssiBarColor=window.getComputedStyle(Q(".rssi-bar1")).getPropertyValue("background-color"),Q("#wifisignal")&&(i.onmouseover=function(){Q("#wifisignal").style.display="block"},i.onmouseout=function(){Q("#wifisignal").style.display="none"})}function ptcshow(i){if(void 0!==i.ptc&&void 0!==i.pt){var t=i.ptc,e=i.pt,n=Q("#ptc-pane");if(n){n.style.display="o"==t?"none":"block";var r=Q("#ptc-state");r&&(r.style.backgroundColor="c"==t?"lightgreen":"gray");var o=Q("#ptc-state-idle");if(o){var a=Q("#ptc-state-run");"c"==t?(o.style.display="none",a.style.display="block"):(o.style.display="block",a.style.display="none")}var l,s,d,c=Q("#ptc-time");if(c&&(c.innerHTML=(l=e,s=Math.floor(l/3600),d=Math.floor((l-3600*s)/60),(s?s+"H":"")+(s+d?d+"M":"")+(l-3600*s-60*d)+"S")),void 0!==i.ptctp){var p=Q("#ptc-temp");p&&(p.innerHTML=i.ptctp<-100?"NA":i.ptctp/100+"&deg;C")}if(void 0!==i.ptclo&&void 0!==i.ptcup){var g=Q("#ptc-set");g&&(g.innerHTML=i.ptclo/100+" ~ "+i.ptcup/100+"&deg;C")}}}}function showPlatoUnit(){for(var i=document.querySelectorAll(".platounit"),t=0;t<i.length;t++)i[t].style.display="inline-block"}function gravityInfo(i){if(Q("#gravity-device-rssi")&&wifibar("#gravity-device-rssi",i.r),i.u>84879460){var t=new Date(1e3*i.u);Q("#gravity-device-last")&&(Q("#gravity-device-last").innerHTML=t.shortLocalizedString())}!BChart.calibrating&&i.g>0&&updateGravity(window.plato?BrewMath.sg2pla(i.g/1e3):i.g/1e3),i.t>-2e4&&(Q("#gravity-device-temp").innerHTML=i.t/100+"&deg;"+window.tempUnit)}function BPLMsg(i){BWF.gotMsg=!0,void 0!==i.rssi&&displayrssi(i.rssi),void 0!==i.sl&&displayLcd(i),void 0!==i.reload&&(console.log("Forced reload chart"),BChart.reqnow(),Q("#recording").innerHTML&&Q("#recording").innerHTML==i.log||(window.npt=0)),void 0!==i.nn&&(Q("#hostname").innerHTML=i.nn,document.title=i.nn),void 0!==i.ver&&(JSVERSION!=i.ver&&alert("Versjon stemmer ikke !. Last siden på nytt."),Q("#verinfo").innerHTML="v"+i.ver),void 0!==i.tm&&void 0!==i.off&&checkTime(i.tm,i.off),void 0!==i.log&&(Q("#recording").innerHTML=i.log),void 0!==i.cap&&Capper.status(i.cap),void 0!==i.plato&&(window.plato=i.plato,window.plato&&showPlatoUnit()),void 0!==i.pm&&void 0!==i.psi&&0!=i.pm&&(Q("#pressure-info-pane").style.display="block",Q("#pressure-psi").innerHTML=i.psi),void 0!==i.G&&gravityInfo(i.G),ptcshow(i),void 0!==i.h&&(Q("#humidity-info").classList.remove("no-display"),Q("#humidity").innerHTML=i.h<=100?i.h+"%":"--"),void 0!==i.hr&&(Q("#room-humidity-info").classList.remove("no-display"),Q("#room-humidity").innerHTML=i.hr<=100?i.hr+"%":"--")}function connBWF(){BWF.init({onconnect:function(){BWF.send("c"),window.lcdTimer&&clearInterval(window.lcdTimer),window.lcdTimer=setInterval(function(){if(!BWF.gotMsg){if(window.rcTimeout){if(BWF.rcCount++,console.log("rcTimeout failed."),BWF.rcCount<3)return;clearTimer(window.rcTimeout)}return controllerError(),window.rcTimeout=setTimeout(function(){window.rcTimeout=null,BWF.gotMsg||BWF.reconnect(!0)},T_BWF_RECONNECT),void(BWF.rcCount=0)}BWF.gotMsg=!1},T_BWF_LCD)},error:function(i){communicationError(),closeDlgLoading()},handlers:{A:BPLMsg,G:function(i){gravityDevice(i)},C:function(i){"undefined"!=typeof ccparameter&&ccparameter(i)},B:function(i){"undefined"!=typeof rcvBeerProfile&&rcvBeerProfile(i)}}})}function init_classic(){window.plato=!1,BChart.init("div_g",Q("#ylabel").innerHTML,Q("#y2label").innerHTML),initRssi(),Capper.init(),BWF.gotMsg=!0,initctrl_C(),connBWF(),setTimeout(function(){BChart.start()},T_LOAD_CHART)}function init(){Q("#pressure-info-pane").style.display="none",Q(".gravity-device-pane").style.display="none",window.plato=!1,BChart.init("div_g",Q("#ylabel").innerHTML,Q("#y2label").innerHTML,"div_p",Q("#psilabel").innerHTML,Q("#vollabel").innerHTML,"div_h",Q("#rhlabel").innerHTML),initRssi(),Capper.init(),BWF.gotMsg=!0,connBWF(),setTimeout(function(){BChart.start()},T_LOAD_CHART),getActiveNavItem()}</script><style>.dygraph-legend{position:absolute;font-size:14px;z-index:10;width:250px;background:#fff;line-height:normal;text-align:left;overflow:hidden}.dygraph-legend-line{display:inline-block;position:relative;bottom:.5ex;padding-left:1em;height:1px;border-bottom-width:2px;border-bottom-style:solid}.dygraph-legend-dash{display:inline-block;position:relative;bottom:.5ex;height:1px;border-bottom-width:2px;border-bottom-style:solid}.dygraph-roller{position:absolute;z-index:10}.dygraph-annotation{position:absolute;z-index:10;overflow:hidden}.dygraph-default-annotation{border:1px solid #000;background-color:#fff;text-align:center}.dygraph-axis-label{z-index:10;line-height:normal;overflow:hidden;color:#000}.dygraph-title{font-weight:700;z-index:10;text-align:center}.dygraph-xlabel{text-align:center}.dygraph-label-rotate-left{text-align:center;transform:rotate(90deg);-webkit-transform:rotate(90deg);-moz-transform:rotate(90deg);-o-transform:rotate(90deg);-ms-transform:rotate(90deg)}.dygraph-label-rotate-right{text-align:center;transform:rotate(-90deg);-webkit-transform:rotate(-90deg);-moz-transform:rotate(-90deg);-o-transform:rotate(-90deg);-ms-transform:rotate(-90deg)}</style><link href="https://fonts.googleapis.com/css?family=Roboto" rel=stylesheet><style>*{-webkit-box-sizing:border-box;box-sizing:border-box;margin:0;padding:0}body,html{height:100%}a{text-decoration:none}html{line-height:1.5;font-family:Roboto,sans-serif;font-weight:400;color:rgba(0,0,0,.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}h1,h2,h3,h4,h5,h6{font-weight:400;line-height:1.1}h1 a,h2 a,h3 a,h4 a,h5 a,h6 a{font-weight:inherit}h1{font-size:4.2rem;line-height:110%;margin:2.1rem 0 1.68rem 0}h2{font-size:3.56rem;line-height:110%;margin:1.78rem 0 1.424rem 0}h3{font-size:2.92rem;line-height:110%;margin:1.46rem 0 1.168rem 0}h4{font-size:2.28rem;line-height:110%;margin:1.14rem 0 .912rem 0}h5{font-size:1.64rem;line-height:110%;margin:.82rem 0 .656rem 0}h6{font-size:1rem;line-height:110%;margin:.5rem 0 .4rem 0}em{font-style:italic}strong{font-weight:500}small{font-size:75%}.light{font-weight:300}.thin{font-weight:200}html [layout],html [layout][horizontal],html [layout][vertical]{display:-webkit-box;display:-ms-flexbox;display:flex}html [layout][horizontal]{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}html [layout][vertical]{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}html [flex]{-webkit-box-flex:1;-ms-flex:1;flex:1;-ms-flex-preferred-size:1e-9px;flex-basis:1e-9px}html [layout][center-center],html [layout][cross-center]{-webkit-box-align:center;-ms-flex-align:center;align-items:center}html [layout][cross-end]{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}html [layout][center-center],html [layout][main-center]{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}html [layout][main-justified]{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}html [layout][main-distributed]{-ms-flex-pack:distribute;justify-content:space-around}html [hidden]{display:none!important}html [relative]{position:relative}.header{height:64px;background:#009688;-webkit-box-shadow:0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28);box-shadow:0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28);padding:0 16px;z-index:2}.header_title{font-size:32px;line-height:64px;color:#fff;margin:0;padding:0}.header_version-display{font-size:14px;color:#fff}@media (max-width:700px){[navigation] [menuToggle]{display:block;position:relative;z-index:1;top:3px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}}[navigation] input{display:none}@media (max-width:700px){[navigation] input{display:block;width:40px;height:32px;position:absolute;top:-7px;left:-5px;cursor:pointer;opacity:0;z-index:2;-webkit-touch-callout:none}[navigation] input:checked~ul{-webkit-transform:scale(1,1);transform:scale(1,1);opacity:1}[navigation] input:checked~span{opacity:1;-webkit-transform:rotate(45deg) translate(-2px,-1px);transform:rotate(45deg) translate(-2px,-1px);background:#232323}[navigation] input:checked~span:nth-last-child(3){opacity:0;-webkit-transform:rotate(0) scale(.2,.2);transform:rotate(0) scale(.2,.2)}[navigation] input:checked~span:nth-last-child(2){opacity:1;-webkit-transform:rotate(-45deg) translate(0,-1px);transform:rotate(-45deg) translate(0,-1px)}}[navigation] span{display:none}@media (max-width:700px){[navigation] span{display:block;width:33px;height:4px;margin-bottom:5px;position:relative;background:#fff;border-radius:3px;z-index:1;-webkit-transform-origin:4px 0;transform-origin:4px 0;-webkit-transition:background .5s cubic-bezier(.77,.2,.05,1),opacity .55s ease,-webkit-transform .5s cubic-bezier(.77,.2,.05,1);transition:background .5s cubic-bezier(.77,.2,.05,1),opacity .55s ease,-webkit-transform .5s cubic-bezier(.77,.2,.05,1);transition:transform .5s cubic-bezier(.77,.2,.05,1),background .5s cubic-bezier(.77,.2,.05,1),opacity .55s ease;transition:transform .5s cubic-bezier(.77,.2,.05,1),background .5s cubic-bezier(.77,.2,.05,1),opacity .55s ease,-webkit-transform .5s cubic-bezier(.77,.2,.05,1)}[navigation] span:first-child{-webkit-transform-origin:0 0;transform-origin:0 0}[navigation] span:nth-last-child(2){-webkit-transform-origin:0 100%;transform-origin:0 100%}}[navigation] .options{list-style-type:none;height:100%}[navigation] .options>li{display:inline-block;height:100%}[navigation] .options a{color:#fff;text-transform:uppercase;height:100%;padding:8px;display:inline-block;line-height:48px;border-bottom:3px solid transparent}[navigation] .options a.active{border-bottom:3px solid #ffc107}[navigation] .options a:hover{border-bottom:3px solid #fff}@media (max-width:700px){[navigation] .options{padding-top:64px;position:fixed;display:block;width:100vw;height:100vh;right:0;top:0;background:#ededed;list-style-type:none;-webkit-font-smoothing:antialiased;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transform:translate(100%,0);transform:translate(100%,0);-webkit-transition:-webkit-transform .5s cubic-bezier(.77,.2,.05,1);transition:-webkit-transform .5s cubic-bezier(.77,.2,.05,1);transition:transform .5s cubic-bezier(.77,.2,.05,1);transition:transform .5s cubic-bezier(.77,.2,.05,1),-webkit-transform .5s cubic-bezier(.77,.2,.05,1)}[navigation] .options>li{display:block;height:auto;text-align:center}[navigation] .options a{color:#222;height:auto;width:100%;display:block}[navigation] .options a.active{color:#ffc107;border:none}[navigation] .options a:hover{background:#ccc;border:none}}.footer{height:40px;background:#222;color:rgba(255,255,255,.87);padding:0 16px}.footer a{color:rgba(255,255,255,.87);font-weight:700}[viewport]{min-height:calc(100% - 104px)}@media (max-width:900px){[viewport]{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important;min-height:0}}[main]{padding:16px;overflow-y:auto}@media (max-width:900px){[main]{overflow:initial}}@media (max-width:599px){[main]>[layout] .chart-legend{width:100%}}@media (max-width:599px){[main]>[layout]{-webkit-box-orient:vertical!important;-webkit-box-direction:normal!important;-ms-flex-direction:column!important;flex-direction:column!important}}.error{position:fixed;left:20px;bottom:50px;background-color:#323232;padding:12px 24px 17px 24px;vertical-align:middle;color:#fff;-webkit-box-shadow:0 7px 18px rgba(0,0,0,.2);box-shadow:0 7px 18px rgba(0,0,0,.2)}.error:empty{display:none}input[type=datetime-local],input[type=number],input[type=password],input[type=text]{width:100%;max-width:280px;margin:16px 0;display:block;border:none;padding:18px 0 10px;border-bottom:solid 1px #009688;-webkit-transition:all .3s cubic-bezier(.64,.09,.08,1);transition:all .3s cubic-bezier(.64,.09,.08,1);background:-webkit-gradient(linear,left top,left bottom,color-stop(96%,rgba(255,255,255,0)),color-stop(4%,#009688));background:linear-gradient(to bottom,rgba(255,255,255,0) 96%,#009688 4%);background-position:-100% 0;background-size:100% 100%;background-repeat:no-repeat;color:#00302c}input[type=datetime-local]:focus,input[type=number]:focus,input[type=password]:focus,input[type=text]:focus{-webkit-box-shadow:none;box-shadow:none;outline:0;background-position:0 0}input[type=datetime-local]:focus::-webkit-input-placeholder,input[type=number]:focus::-webkit-input-placeholder,input[type=password]:focus::-webkit-input-placeholder,input[type=text]:focus::-webkit-input-placeholder{color:#009688;font-size:11px;-webkit-transform:translateY(-20px);transform:translateY(-20px);visibility:visible!important;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out}input[type=datetime-local]:focus:-ms-input-placeholder,input[type=number]:focus:-ms-input-placeholder,input[type=password]:focus:-ms-input-placeholder,input[type=text]:focus:-ms-input-placeholder{color:#009688;font-size:11px;transform:translateY(-20px);visibility:visible!important;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out}input[type=datetime-local]:focus::-ms-input-placeholder,input[type=number]:focus::-ms-input-placeholder,input[type=password]:focus::-ms-input-placeholder,input[type=text]:focus::-ms-input-placeholder{color:#009688;font-size:11px;transform:translateY(-20px);visibility:visible!important;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out}input[type=datetime-local]:focus::placeholder,input[type=number]:focus::placeholder,input[type=password]:focus::placeholder,input[type=text]:focus::placeholder{color:#009688;font-size:11px;-webkit-transform:translateY(-20px);transform:translateY(-20px);visibility:visible!important;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out}input[type=datetime-local]:invalid,input[type=number]:invalid,input[type=password]:invalid,input[type=text]:invalid{background:-webkit-gradient(linear,left top,left bottom,color-stop(96%,rgba(255,255,255,0)),color-stop(4%,red));background:linear-gradient(to bottom,rgba(255,255,255,0) 96%,red 4%)}.hide{display:none!important}.switch-input{display:none}.switch-label{position:relative;display:inline-block;min-width:148px;cursor:pointer;font-weight:500;text-align:left;margin:0;padding:4px 0 4px 44px}.switch-label:after,.switch-label:before{content:"";position:absolute;margin:0;outline:0;top:50%;-webkit-transform:translate(0,-50%);transform:translate(0,-50%);-webkit-transition:all .3s ease;transition:all .3s ease}.switch-label:before{left:1px;width:34px;height:14px;background-color:#ddd;border-radius:8px}.switch-label:after{left:0;width:20px;height:20px;background-color:#fafafa;border-radius:50%;-webkit-box-shadow:0 3px 1px -2px rgba(0,0,0,.14),0 2px 2px 0 rgba(0,0,0,.098),0 1px 5px 0 rgba(0,0,0,.084);box-shadow:0 3px 1px -2px rgba(0,0,0,.14),0 2px 2px 0 rgba(0,0,0,.098),0 1px 5px 0 rgba(0,0,0,.084)}.switch-input:checked+.switch-label:after{background-color:#4caf50;-webkit-transform:translate(80%,-50%);transform:translate(80%,-50%)}.switch-input:checked+label[for=beer-temp].switch-label:after{background-color:#29aa29}.switch-input:checked+label[for=beer-set].switch-label:after{background-color:#f06464}.switch-input:checked+label[for=fridge-temp].switch-label:after{background-color:#59b8ff}.switch-input:checked+label[for=fridge-set].switch-label:after{background-color:#ffa14c}.switch-input:checked+label[for=room-temp].switch-label:after{background-color:#aaa}.switch-input:checked+label[for=gravity].switch-label:after{background-color:#909}.switch-input:checked+label[for=aux-temp].switch-label:after{background-color:#f5e127}.switch-input:checked+label[for=filtersg].switch-label:after{background-color:#000abb}.switch-input:checked+label[for=pressure].switch-label:after{background-color:#00e}.switch-input:checked+label[for=pressure-set].switch-label:after{background-color:#f06464}.switch-input:checked+label[for=carbonation].switch-label:after{background-color:#aaa}.switch-input:checked+label[for=humidity].switch-label:after{background-color:#22d}.switch-input:checked+label[for=humidity-set].switch-label:after{background-color:#e11}.switch-input:checked+label[for=room-humidity].switch-label:after{background-color:#aaa}.switch-input:checked+label[for=sgchange1].switch-label:after{background-color:#d3d}.switch-input:checked+label[for=sgchange2].switch-label:after{background-color:#33d}.switch-input:checked+label[for=sgchange3].switch-label:after{background-color:#3d3}.modal{display:none;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;position:fixed;top:0;left:0;right:0;bottom:0;overflow-y:auto;overflow-x:hidden;z-index:1000;-webkit-transition:all .5s cubic-bezier(.23,1,.32,1);transition:all .5s cubic-bezier(.23,1,.32,1);-webkit-transition-delay:0s;transition-delay:0s;background:rgba(0,0,0,.3)}.modal-content{position:relative;padding:2.4rem;background:#fff;background-clip:padding-box;-webkit-box-shadow:0 12px 15px 0 rgba(0,0,0,.25);box-shadow:0 12px 15px 0 rgba(0,0,0,.25);-webkit-transition:all .25s cubic-bezier(.23,1,.32,1);transition:all .25s cubic-bezier(.23,1,.32,1);max-width:600px;padding:2rem}.modal-content h2.message{font-size:18px;font-weight:700;text-transform:uppercase}.btn{display:inline-block;position:relative;cursor:pointer;height:35px;line-height:35px;padding:0 1.5rem;font-size:15px;font-weight:600;letter-spacing:.8px;text-align:center;text-transform:uppercase;vertical-align:middle;white-space:nowrap;outline:0;border:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:all .3s ease-out;transition:all .3s ease-out;background-color:transparent;margin-right:8px}.btn[disabled]{color:#bdbdbd}.btn[disabled]:hover{background-color:transparent;cursor:not-allowed}.btn--raised{background-color:#009688;color:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12);box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.2),0 1px 5px 0 rgba(0,0,0,.12)}.btn--raised:hover{background-color:#00635a}.btn--primary{color:#009688}.btn:hover{background-color:rgba(153,153,153,.2);cursor:pointer}[side]{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);width:300px;padding:16px;overflow-y:auto;background:#eee}@media (max-width:900px){[side]{width:100%;-webkit-box-ordinal-group:6;-ms-flex-order:5;order:5}}.data-pane{list-style-type:none;display:block}.data-pane .heading{border-bottom:1px solid rgba(0,0,0,.64);padding-top:8px;padding-bottom:4px;margin-bottom:4px}.data-pane .heading strong{text-transform:uppercase;display:inline-block}.data-pane .heading #lcdControlState:empty+.for{display:none}.chart{width:calc(100% - 280px)}@media (max-width:599px){.chart{width:100%;margin-bottom:16px}}.chart-main{height:390px}.chart-p{height:130px}.chart-legend{list-style-type:none;width:280px}.chart-legend-row{padding:8px 16px 0 16px}.chart-legend-row>div{display:inline-block}.chart-legend-row .toggle{width:12px;height:12px;margin-right:8px;border-radius:100%;border:1px solid #000}.chart-legend-row .toggle:hover{cursor:pointer}.chart-legend-row.time{background-color:#def;padding-bottom:8px}.forced-hidden{display:none!important}#gravity-og:hover,#gravity-sg:hover{cursor:pointer}.legend-label{width:100px;font-weight:700}.legend-label:hover{cursor:pointer}#formula-btn{float:right;display:none;font-style:italic;text-decoration:underline}#formula-btn:hover{cursor:pointer}#polynomialpane .modal-content{position:relative;max-width:800px}#pointlist{border-collapse:collapse}#pointlist th{border:solid 1px}#pointlist td{border:solid 1px;border-collapse:collapse}#xclose{float:right;font-size:14px;color:red}#xclose:hover{cursor:pointer}.wifi-bars{position:relative;height:16px;width:24px;display:inline-block}.no-display{display:none!important}#wifisignal{font-size:12pt;color:#000;font-family:Courier New,Courier,monospace;position:absolute;top:6px;left:4px;display:none}.rssi-bar{position:absolute;bottom:0;float:left;width:4px;border-radius:1px;background-color:#444}.rssi-bar1{height:4px;left:0}.rssi-bar2{height:8px;left:6px}.rssi-bar3{height:12px;left:12px}.rssi-bar4{height:16px;left:18px}.platounit{display:none}</style></head><body onload=init()><header layout horizontal main-justified cross-center relative class=header><h1 class=header_title><span id=hostname>BrewPiLess</span> <span id=verinfo class=header_version-display></span></h1><div navigation><div menutoggle><input type=checkbox> <span></span> <span></span> <span></span><ul class=options><li><a href=/index.htm> graf </a></li><li><a href=/control.htm> kontroll </a></li><li><a href=/logging.htm> logger </a></li><li><a href=/setup.htm> oppsett </a></li><li><a href=/config.htm> config </a></li><li><a href=/gravity.htm> egenvekt </a></li><li><a href=/pressure.htm> Trykk </a></li></ul></div></div></header><div style=display:none><span id=ylabel>Tempratur</span><span id=y2label>Hydrometer</span><span id=psilabel>Trykk(psi)</span><span id=vollabel>CO2 Vol</span><span id=rhlabel>Relative Humidity</span></div><div viewport layout horizontal><div side><div id=status class=status-display><ul id=status-pane class="data-pane status-pane"><li class=heading layout horizontal main-justified><strong>Status:</strong><div style=display:inline-block><strong id=lcdControlState></strong></div></li><li layout horizontal main-justified><span class=descriptor>Mode:</span><span id=lcdControlMode></span></li><li layout horizontal main-justified><span class=descriptor>Øl temp:</span><span id=lcdBeerTemp></span></li><li layout horizontal main-justified><span class=descriptor>Øl sett:</span><span id=lcdBeerSet></span></li><li layout horizontal main-justified><span class=descriptor>Kjøleskapstemperatur:</span><span id=lcdFridgeTemp></span></li><li layout horizontal main-justified><span class=descriptor>Kjøleskapssett:</span><span id=lcdFridgeSet></span></li><li layout horizontal main-justified><span class=descriptor>Romtemp:</span><span id=lcdRoomTemp></span></li><li layout horizontal main-justified class=no-display id=humidity-info><span class=descriptor>Chamber Humidity</span><span id=humidity></span></li><li layout horizontal main-justified class=no-display id=room-humidity-info><span class=descriptor>Room Humidity</span><span id=room-humidity></span></li></ul></div><ul id=gravity-pane class="data-pane gravity-pane"><li class=heading><strong>Egenvekt:</strong></li><li layout horizontal main-justified><span class=descriptor>Egenvekt start OG:</span><span><span id=gravity-og onclick=inputOG()>--</span><span class=platounit>&deg;P</span></span></li><li layout horizontal main-justified><span class=descriptor>Egenvekt målt SG</span><span><span id=gravity-sg onclick=inputSG()>--</span><span class=platounit>&deg;P</span></span></li><li layout horizontal main-justified><span class=descriptor>Tetthet endret(48/24/12T):</span><div id=sgchanged></div></li><li layout horizontal main-justified><span class=descriptor>ATT:</span><span><span id=gravity-att>--</span>%</span></li><li layout horizontal main-justified><span class=descriptor>ABV:</span><span><span id=gravity-abv>--</span>%</span></li></ul><ul class="data-pane gravity-device-pane"><li class=heading><strong><span class=ispindel-info> iSpindel data:</span><span class=tilt-info>Tilt</span></strong></li><li class=ispindel-info layout horizontal main-justified><span class=descriptor>Tilt:</span><span id=iSpindel-tilt>--</span></li><li class=ispindel-info layout horizontal main-justified><span class=descriptor>Batteri:</span><span id=iSpindel-battery>--</span></li><li layout horizontal main-justified><span class=descriptor>Temperature</span> <span id=gravity-device-temp>--</span></li><li layout horizontal main-justified id=ispindel-rssi-line><span class=descriptor>RSSI</span><div id=gravity-device-rssi class=wifi-bars><div class="rssi-bar rssi-bar1"></div><div class="rssi-bar rssi-bar2"></div><div class="rssi-bar rssi-bar3"></div><div class="rssi-bar rssi-bar4"></div></div></li><li layout horizontal main-justified><span class=descriptor>Siste oppdatering:</span><span id=gravity-device-last>--</span></li></ul><ul class="data-pane ptc-pane" id=ptc-pane style=display:none><li class=heading layout horizontal main-justified><strong>Glycol Temp Control:</strong><div style=display:inline-block><strong><span id=ptc-state-idle>PAUSE</span><span id=ptc-state-run style=display:none>KJØRER</span></strong></div></li><li layout horizontal main-justified><span class=descriptor></span> for <span id=ptc-time></span></li><li layout horizontal main-justified><span class=descriptor>Område:</span><span id=ptc-set></span></li></ul><ul class="data-pane capping-info-pane"><li class=heading layout horizontal main-justified><strong> Lullet Status: </strong><div style=display:inline-block><strong><span id=capstate-open class=capstate>Open</span><span id=capstate-close class=capstate>Lukket</span></strong></div></li><li layout horizontal main-justified><span class=descriptor>Tilstand:</span><div style=display:inline-block><span id=cs-sgcon class=capstate>gravity &lt;= <span id=capgravityset></span></span> <span id=cs-timecon class=capstate>after <span id=captimeset></span></span> <span id=cs-mancap class=capstate>Manuelt lukket</span><span id=cs-manopen class=capstate>Manuelt åpen</span></div></li></ul><ul class=data-pane id=pressure-info-pane><li layout horizontal main-justified><span class=descriptor>Pressure</span><span><span id=pressure-psi></span> psi</span></li></ul><ul class=data-pane><li class=heading><strong>System:</strong></li><li layout horizontal main-justified><span class=descriptor>Skrive logg:</span><span id=recording></span></li><li layout horizontal main-justified><span class=descriptor>WiFi:</span><div id=rssi class=wifi-bars><div class="rssi-bar rssi-bar1"></div><div class="rssi-bar rssi-bar2"></div><div class="rssi-bar rssi-bar3"></div><div class="rssi-bar rssi-bar4"></div></div></li></ul></div><div main flex><div layout horizontal><div class=chart><div id=div_g class=chart-main></div><div id=div_p class="chart-p pressure-group forced-hidden"></div><div id=div_h class="chart-p humidity-group forced-hidden"></div></div><ul flex class=chart-legend><li layout horizontal main-justified class="chart-legend-row time"><span class=beer-chart-legend-time>Dato / tid</span><span class=beer-chart-state>tilstand</span></li><li layout horizontal main-justified class="chart-legend-row beer-temp"><input type=checkbox id=beer-temp name=set-name class=switch-input checked><label onclick=BChart.toggle(BeerTempLine) for=beer-temp class=switch-label>Øl Temp</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row beer-set"><input type=checkbox id=beer-set name=set-name class=switch-input checked><label onclick=BChart.toggle(BeerSetLine) for=beer-set class=switch-label>Øl sett</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row fridge-temp"><input type=checkbox id=fridge-temp name=set-name class=switch-input checked><label onclick=BChart.toggle(FridgeTempLine) for=fridge-temp class=switch-label>Kjøleskap Temp</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row fridge-set"><input type=checkbox id=fridge-set name=set-name class=switch-input checked><label onclick=BChart.toggle(FridgeSetLine) for=fridge-set class=switch-label>Kjøleskap  Sett</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row room-temp"><input type=checkbox id=room-temp name=set-name class=switch-input checked><label onclick=BChart.toggle(RoomTempLine) for=room-temp class=switch-label>Rom Temp</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row aux-temp"><input type=checkbox id=aux-temp name=set-name class=switch-input checked><label onclick=BChart.toggle(AuxTempLine) for=aux-temp class=switch-label>Aux Temp</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row gravity"><input type=checkbox id=gravity name=set-name class=switch-input checked><label onclick=BChart.toggle(GravityLine) for=gravity class=switch-label>Hydrometer<span class=platounit>&deg;P</span></label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row filtersg"><input type=checkbox id=filtersg name=set-name class=switch-input checked><label onclick=BChart.toggle(FilteredSgLine) for=filtersg class=switch-label>Filtrert SG<span class=platounit>&deg;P</span></label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row pressure pressure-group forced-hidden"><input type=checkbox id=pressure name=set-name class=switch-input checked><label onclick=BChart.toggle(PressureLine,1) for=pressure class=switch-label>Trykk</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row pressure-set pressure-group forced-hidden"><input type=checkbox id=pressure-set name=set-name class=switch-input checked><label onclick=BChart.toggle(PressureSetLine,1) for=pressure-set class=switch-label>Sett trykk</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row carbonation pressure-group forced-hidden"><input type=checkbox id=carbonation name=set-name class=switch-input checked><label onclick=BChart.toggle(CarbonationLine,1) for=carbonation class=switch-label>CO2 Vol.</label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row humidity humidity-group forced-hidden"><input type=checkbox id=humidity name=set-name class=switch-input checked><label onclick=BChart.toggle(ChamberHumidityLine,2) for=humidity class=switch-label> Humidity </label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row set-humidity humidity-group forced-hidden"><input type=checkbox id=humidity-set name=set-name class=switch-input checked><label onclick=BChart.toggle(SetHumidityLine,2) for=humidity-set class=switch-label> Target RH </label><div class=legend-value>--</div></li><li layout horizontal main-justified class="chart-legend-row room-humidity humidity-group forced-hidden"><input type=checkbox id=room-humidity name=set-name class=switch-input checked><label onclick=BChart.toggle(RoomHumidityLine,2) for=room-humidity class=switch-label> Room RH </label><div class=legend-value>--</div></li><li layout horizontal main-justified class=chart-legend-row id=formula-btn onclick=openpolynomialpane()>f</li></ul></div></div></div><footer layout horizontal main-justified cross-center class=footer><span>BrewPiLess by <a href=https://github.com/vitotai/ >vitotai</a></span> <span><a href=https://github.com/vitotai/BrewPiLess/ >project on GitHub</a></span></footer><div class=error><div class=errormsg id=error_waitbpl> venter på oppdatering fra skript ... </div><div class=errormsg id=error_connect> Kunne ikke koble til serveren. </div><div class=errormsg id=error_noupdate> Kontrolleren oppdaterer ikke data. </div></div><div id=dlg_loading class=modal><div class=modal-content><p> Kommunisere med BrewPiLess-kontroller ... </p></div></div><div id=dlg_addgravity class=modal><div class=modal-content><span class="message sg"> Legg til OG: </span><span class="message og"> Angi OG: </span><p> Angi OG. </p><ul style=list-style-type:none><li><input class=sginput type=text size=6 onchange=inputsg_change()><span class=platounit>&deg;P</span> @ <input class=tempinput type=text size=6 value=20 onchange=inputsg_change()><sapn class=temp-unit>&deg;C</sapn></li><li>~ <span id=sginput-hmc></span> @ <span id=sginput-hm-cal-temp></span><sapn class=temp-unit>&deg;C</sapn></li><li>~ <span id=sginput-sg-ispindel></span><span class=platounit>&deg;P</span> @ <span id=sginput-ispindel-temp></span><sapn class=temp-unit>&deg;C</sapn></li></ul><div class=dialog-buttons><button class="btn btn--rise" onclick=dismissgravity()>Avbryt</button> <button class="btn btn--rise" onclick=inputgravity()>OK</button></div></div></div><div id=polynomialpane class=modal><div class=modal-content><table><tr><td><table id=pointlist><thead><tr><th> Tilt </th><th> SG<span class=platounit>&deg;P</span></th><th> Beregnet </th><th> Feil </th><th> Ignorert </th></tr></thead><tobdy><tr class=pl_calpoint><td class=pl_tilt></td><td class=pl_sg></td><td class=pl_value></td><td class=pl_error></td><td><input class=pl_ignored_cb type=checkbox></td></tr></tobdy></table><div style=float:right><button class="btn btn--rise" onclick=applyIgnoreMask()>Bruk</button></div></td><td><div id=graph></div><span id=polynormial></span></td></tr></table><div class=dialog-buttons><button class="btn btn--rise" onclick=closepolynomialpane()>OK</button></div></div></div></body></html>